
Distance_Measuring_System.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  000029a6  00002a3a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800178  00800178  00002b52  2**0
                  ALLOC
  3 .stab         00002664  00000000  00000000  00002b54  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014cc  00000000  00000000  000051b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006684  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00006824  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00006a16  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00008e21  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000a1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b380  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000b540  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000b836  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 38       	cpi	r26, 0x85	; 133
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <main>
      8a:	0c 94 d1 14 	jmp	0x29a2	; 0x29a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 14 	jmp	0x2934	; 0x2934 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 14 	jmp	0x296c	; 0x296c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 14 	jmp	0x297c	; 0x297c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 14 	jmp	0x294c	; 0x294c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 14 	jmp	0x2984	; 0x2984 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 be 14 	jmp	0x297c	; 0x297c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 58       	subi	r30, 0x88	; 136
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_6>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect){
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	if(ICU_callBackPtr != NULL)
     e58:	80 91 78 01 	lds	r24, 0x0178
     e5c:	90 91 79 01 	lds	r25, 0x0179
     e60:	00 97       	sbiw	r24, 0x00	; 0
     e62:	29 f0       	breq	.+10     	; 0xe6e <__vector_6+0x40>
	{

		ICU_callBackPtr(); /* another method to call the function using pointer to function g_callBackPtr(); */
     e64:	e0 91 78 01 	lds	r30, 0x0178
     e68:	f0 91 79 01 	lds	r31, 0x0179
     e6c:	09 95       	icall
	}
}
     e6e:	cf 91       	pop	r28
     e70:	df 91       	pop	r29
     e72:	ff 91       	pop	r31
     e74:	ef 91       	pop	r30
     e76:	bf 91       	pop	r27
     e78:	af 91       	pop	r26
     e7a:	9f 91       	pop	r25
     e7c:	8f 91       	pop	r24
     e7e:	7f 91       	pop	r23
     e80:	6f 91       	pop	r22
     e82:	5f 91       	pop	r21
     e84:	4f 91       	pop	r20
     e86:	3f 91       	pop	r19
     e88:	2f 91       	pop	r18
     e8a:	0f 90       	pop	r0
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	0f 90       	pop	r0
     e90:	1f 90       	pop	r1
     e92:	18 95       	reti

00000e94 <Icu_voidInit>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_voidInit(const Icu_ConfigType * Config_Ptr)
{
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <Icu_voidInit+0x6>
     e9a:	cd b7       	in	r28, 0x3d	; 61
     e9c:	de b7       	in	r29, 0x3e	; 62
     e9e:	9a 83       	std	Y+2, r25	; 0x02
     ea0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8INPUT);
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	66 e0       	ldi	r22, 0x06	; 6
     ea6:	40 e0       	ldi	r20, 0x00	; 0
     ea8:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<3) | (1<<2);
     eac:	ef e4       	ldi	r30, 0x4F	; 79
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	8c e0       	ldi	r24, 0x0C	; 12
     eb2:	80 83       	st	Z, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
     eb4:	ae e4       	ldi	r26, 0x4E	; 78
     eb6:	b0 e0       	ldi	r27, 0x00	; 0
     eb8:	ee e4       	ldi	r30, 0x4E	; 78
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	80 81       	ld	r24, Z
     ebe:	98 2f       	mov	r25, r24
     ec0:	98 7f       	andi	r25, 0xF8	; 248
     ec2:	e9 81       	ldd	r30, Y+1	; 0x01
     ec4:	fa 81       	ldd	r31, Y+2	; 0x02
     ec6:	80 81       	ld	r24, Z
     ec8:	89 2b       	or	r24, r25
     eca:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
     ecc:	ae e4       	ldi	r26, 0x4E	; 78
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	ee e4       	ldi	r30, 0x4E	; 78
     ed2:	f0 e0       	ldi	r31, 0x00	; 0
     ed4:	80 81       	ld	r24, Z
     ed6:	28 2f       	mov	r18, r24
     ed8:	2f 7b       	andi	r18, 0xBF	; 191
     eda:	e9 81       	ldd	r30, Y+1	; 0x01
     edc:	fa 81       	ldd	r31, Y+2	; 0x02
     ede:	81 81       	ldd	r24, Z+1	; 0x01
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	00 24       	eor	r0, r0
     ee6:	96 95       	lsr	r25
     ee8:	87 95       	ror	r24
     eea:	07 94       	ror	r0
     eec:	96 95       	lsr	r25
     eee:	87 95       	ror	r24
     ef0:	07 94       	ror	r0
     ef2:	98 2f       	mov	r25, r24
     ef4:	80 2d       	mov	r24, r0
     ef6:	82 2b       	or	r24, r18
     ef8:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
     efa:	ec e4       	ldi	r30, 0x4C	; 76
     efc:	f0 e0       	ldi	r31, 0x00	; 0
     efe:	11 82       	std	Z+1, r1	; 0x01
     f00:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
     f02:	e6 e4       	ldi	r30, 0x46	; 70
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	11 82       	std	Z+1, r1	; 0x01
     f08:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<5);
     f0a:	a9 e5       	ldi	r26, 0x59	; 89
     f0c:	b0 e0       	ldi	r27, 0x00	; 0
     f0e:	e9 e5       	ldi	r30, 0x59	; 89
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	80 81       	ld	r24, Z
     f14:	80 62       	ori	r24, 0x20	; 32
     f16:	8c 93       	st	X, r24
}
     f18:	0f 90       	pop	r0
     f1a:	0f 90       	pop	r0
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	08 95       	ret

00000f22 <Icu_voidSetCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_voidSetCallBack(void(*a_ptr)(void))
{
     f22:	df 93       	push	r29
     f24:	cf 93       	push	r28
     f26:	00 d0       	rcall	.+0      	; 0xf28 <Icu_voidSetCallBack+0x6>
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62
     f2c:	9a 83       	std	Y+2, r25	; 0x02
     f2e:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	ICU_callBackPtr = a_ptr;
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	9a 81       	ldd	r25, Y+2	; 0x02
     f34:	90 93 79 01 	sts	0x0179, r25
     f38:	80 93 78 01 	sts	0x0178, r24
}
     f3c:	0f 90       	pop	r0
     f3e:	0f 90       	pop	r0
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <Icu_voidSetEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_voidSetEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	0f 92       	push	r0
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
     f52:	ae e4       	ldi	r26, 0x4E	; 78
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	ee e4       	ldi	r30, 0x4E	; 78
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	28 2f       	mov	r18, r24
     f5e:	2f 7b       	andi	r18, 0xBF	; 191
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	88 2f       	mov	r24, r24
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	00 24       	eor	r0, r0
     f68:	96 95       	lsr	r25
     f6a:	87 95       	ror	r24
     f6c:	07 94       	ror	r0
     f6e:	96 95       	lsr	r25
     f70:	87 95       	ror	r24
     f72:	07 94       	ror	r0
     f74:	98 2f       	mov	r25, r24
     f76:	80 2d       	mov	r24, r0
     f78:	82 2b       	or	r24, r18
     f7a:	8c 93       	st	X, r24
}
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <Icu_u16GetInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Icu_u16GetInputCaptureValue(void)
{
     f84:	df 93       	push	r29
     f86:	cf 93       	push	r28
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62

	return ICR1;
     f8c:	e6 e4       	ldi	r30, 0x46	; 70
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	91 81       	ldd	r25, Z+1	; 0x01

}
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <Icu_voidClearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_voidClearTimerValue(void)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	cd b7       	in	r28, 0x3d	; 61
     fa0:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
     fa2:	ec e4       	ldi	r30, 0x4C	; 76
     fa4:	f0 e0       	ldi	r31, 0x00	; 0
     fa6:	11 82       	std	Z+1, r1	; 0x01
     fa8:	10 82       	st	Z, r1
}
     faa:	cf 91       	pop	r28
     fac:	df 91       	pop	r29
     fae:	08 95       	ret

00000fb0 <Icu_voidDeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_voidDeInit(void)
{
     fb0:	df 93       	push	r29
     fb2:	cf 93       	push	r28
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
     fb8:	ef e4       	ldi	r30, 0x4F	; 79
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1
	TCCR1B = 0;
     fbe:	ee e4       	ldi	r30, 0x4E	; 78
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	10 82       	st	Z, r1
	TCNT1 = 0;
     fc4:	ec e4       	ldi	r30, 0x4C	; 76
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	11 82       	std	Z+1, r1	; 0x01
     fca:	10 82       	st	Z, r1
	ICR1 = 0;
     fcc:	e6 e4       	ldi	r30, 0x46	; 70
     fce:	f0 e0       	ldi	r31, 0x00	; 0
     fd0:	11 82       	std	Z+1, r1	; 0x01
     fd2:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<5);
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8f 7d       	andi	r24, 0xDF	; 223
     fe0:	8c 93       	st	X, r24
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <GIE_voidEnable>:
 */
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"GIE_conf.h"
#include"GIE_priv.h"
void GIE_voidEnable(void){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62

	SREG|=(1<<7);
     ff0:	af e5       	ldi	r26, 0x5F	; 95
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e5       	ldi	r30, 0x5F	; 95
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	80 68       	ori	r24, 0x80	; 128
     ffc:	8c 93       	st	X, r24
	return ;
}
     ffe:	cf 91       	pop	r28
    1000:	df 91       	pop	r29
    1002:	08 95       	ret

00001004 <GIE_voidDisable>:
void GIE_voidDisable(void){
    1004:	df 93       	push	r29
    1006:	cf 93       	push	r28
    1008:	cd b7       	in	r28, 0x3d	; 61
    100a:	de b7       	in	r29, 0x3e	; 62

	SREG&=~(1<<7);
    100c:	af e5       	ldi	r26, 0x5F	; 95
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ef e5       	ldi	r30, 0x5F	; 95
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	8f 77       	andi	r24, 0x7F	; 127
    1018:	8c 93       	st	X, r24
	return;
}
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	08 95       	ret

00001020 <EXTI_voidInit>:
#include"EXTI_priv.h"
#include"../DIO/DIO_int.h"
static void (*EXTI_pFunISR0Fun)(void) = NULL;
static void (*EXTI_pFunISR1Fun)(void) = NULL;
static void (*EXTI_pFunISR2Fun)(void) = NULL;
void EXTI_voidInit(void){
    1020:	df 93       	push	r29
    1022:	cf 93       	push	r28
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62

	//INT0
#if EXTI0_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<6);
    1028:	ab e5       	ldi	r26, 0x5B	; 91
    102a:	b0 e0       	ldi	r27, 0x00	; 0
    102c:	eb e5       	ldi	r30, 0x5B	; 91
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	80 81       	ld	r24, Z
    1032:	80 64       	ori	r24, 0x40	; 64
    1034:	8c 93       	st	X, r24
#else
#error exti0 configuration is wrong

#endif
	//clear register before intializion
	MCUCR &=~(3<<0);
    1036:	a5 e5       	ldi	r26, 0x55	; 85
    1038:	b0 e0       	ldi	r27, 0x00	; 0
    103a:	e5 e5       	ldi	r30, 0x55	; 85
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	80 81       	ld	r24, Z
    1040:	8c 7f       	andi	r24, 0xFC	; 252
    1042:	8c 93       	st	X, r24
#if EXTI0_SENSE_LEVEL == LOW_LEVEL

#elif EXTI0_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<0);
#elif EXTI0_SENSE_LEVEL == FALLING
	MCUCR |= (2<<0);
    1044:	a5 e5       	ldi	r26, 0x55	; 85
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e5 e5       	ldi	r30, 0x55	; 85
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	82 60       	ori	r24, 0x02	; 2
    1050:	8c 93       	st	X, r24
#endif

	//INT1

#if EXTI1_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<7);
    1052:	ab e5       	ldi	r26, 0x5B	; 91
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	eb e5       	ldi	r30, 0x5B	; 91
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 68       	ori	r24, 0x80	; 128
    105e:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<7);
#else
//#error exti0 configuration is wrong
#endif
	//clear register before intializion
	MCUCR &=~(3<<2);
    1060:	a5 e5       	ldi	r26, 0x55	; 85
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e5 e5       	ldi	r30, 0x55	; 85
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	83 7f       	andi	r24, 0xF3	; 243
    106c:	8c 93       	st	X, r24
#if EXTI1_SENSE_LEVEL == LOW_LEVEL

#elif EXTI1_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<2);
#elif EXTI1_SENSE_LEVEL == FALLING
	MCUCR |= (2<<2);
    106e:	a5 e5       	ldi	r26, 0x55	; 85
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e5 e5       	ldi	r30, 0x55	; 85
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	88 60       	ori	r24, 0x08	; 8
    107a:	8c 93       	st	X, r24
#endif


	//INT2
#if EXTI2_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<5);
    107c:	ab e5       	ldi	r26, 0x5B	; 91
    107e:	b0 e0       	ldi	r27, 0x00	; 0
    1080:	eb e5       	ldi	r30, 0x5B	; 91
    1082:	f0 e0       	ldi	r31, 0x00	; 0
    1084:	80 81       	ld	r24, Z
    1086:	80 62       	ori	r24, 0x20	; 32
    1088:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<5);
#else
//#error exti2 configuration is wrong
#endif
	//clear register before intializion
	MCUCSR&=~(1<<6);
    108a:	a4 e5       	ldi	r26, 0x54	; 84
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e5       	ldi	r30, 0x54	; 84
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	8f 7b       	andi	r24, 0xBF	; 191
    1096:	8c 93       	st	X, r24

#if EXTI2_SENSE_LEVEL==FALLING

#elif EXTI2_SENSE_LEVEL==RISING
	MCUCSR|=(1<<6);
    1098:	a4 e5       	ldi	r26, 0x54	; 84
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e4 e5       	ldi	r30, 0x54	; 84
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	80 64       	ori	r24, 0x40	; 64
    10a4:	8c 93       	st	X, r24
#else
#error sense level of exti 0 is wrong
#endif
	return ;
}
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <EXTI_voidSetSenseLevel>:

void EXTI_voidSetSenseLevel(u8 Copy_u8IntPinNum , u8 Copy_u8SenseLevel){
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	28 97       	sbiw	r28, 0x08	; 8
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	89 83       	std	Y+1, r24	; 0x01
    10c2:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8IntPinNum == INT0)
    10c4:	89 81       	ldd	r24, Y+1	; 0x01
    10c6:	88 23       	and	r24, r24
    10c8:	d1 f5       	brne	.+116    	; 0x113e <EXTI_voidSetSenseLevel+0x92>
		{
			MCUCR &=~(3<<0);
    10ca:	a5 e5       	ldi	r26, 0x55	; 85
    10cc:	b0 e0       	ldi	r27, 0x00	; 0
    10ce:	e5 e5       	ldi	r30, 0x55	; 85
    10d0:	f0 e0       	ldi	r31, 0x00	; 0
    10d2:	80 81       	ld	r24, Z
    10d4:	8c 7f       	andi	r24, 0xFC	; 252
    10d6:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	28 2f       	mov	r18, r24
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	38 87       	std	Y+8, r19	; 0x08
    10e0:	2f 83       	std	Y+7, r18	; 0x07
    10e2:	8f 81       	ldd	r24, Y+7	; 0x07
    10e4:	98 85       	ldd	r25, Y+8	; 0x08
    10e6:	82 32       	cpi	r24, 0x22	; 34
    10e8:	91 05       	cpc	r25, r1
    10ea:	89 f0       	breq	.+34     	; 0x110e <EXTI_voidSetSenseLevel+0x62>
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	23 32       	cpi	r18, 0x23	; 35
    10f2:	31 05       	cpc	r19, r1
    10f4:	34 f4       	brge	.+12     	; 0x1102 <EXTI_voidSetSenseLevel+0x56>
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	8a 30       	cpi	r24, 0x0A	; 10
    10fc:	91 05       	cpc	r25, r1
    10fe:	79 f0       	breq	.+30     	; 0x111e <EXTI_voidSetSenseLevel+0x72>
    1100:	7b c0       	rjmp	.+246    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
    1102:	2f 81       	ldd	r18, Y+7	; 0x07
    1104:	38 85       	ldd	r19, Y+8	; 0x08
    1106:	29 34       	cpi	r18, 0x49	; 73
    1108:	31 05       	cpc	r19, r1
    110a:	89 f0       	breq	.+34     	; 0x112e <EXTI_voidSetSenseLevel+0x82>
    110c:	75 c0       	rjmp	.+234    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
			{
			case LOW_LEVEL:

				break;
			case ANY_CHANGE:
				MCUCR |= (1<<0);
    110e:	a5 e5       	ldi	r26, 0x55	; 85
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	e5 e5       	ldi	r30, 0x55	; 85
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	80 81       	ld	r24, Z
    1118:	81 60       	ori	r24, 0x01	; 1
    111a:	8c 93       	st	X, r24
    111c:	6d c0       	rjmp	.+218    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
				break;
			case FALLING:
				MCUCR |= (2<<0);
    111e:	a5 e5       	ldi	r26, 0x55	; 85
    1120:	b0 e0       	ldi	r27, 0x00	; 0
    1122:	e5 e5       	ldi	r30, 0x55	; 85
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	82 60       	ori	r24, 0x02	; 2
    112a:	8c 93       	st	X, r24
    112c:	65 c0       	rjmp	.+202    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
				break;
			case RISING:
				MCUCR |= (3<<0);
    112e:	a5 e5       	ldi	r26, 0x55	; 85
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	e5 e5       	ldi	r30, 0x55	; 85
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	83 60       	ori	r24, 0x03	; 3
    113a:	8c 93       	st	X, r24
    113c:	5d c0       	rjmp	.+186    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
				break;

			}
		}
		else if(Copy_u8IntPinNum == INT1)
    113e:	89 81       	ldd	r24, Y+1	; 0x01
    1140:	81 30       	cpi	r24, 0x01	; 1
    1142:	d1 f5       	brne	.+116    	; 0x11b8 <EXTI_voidSetSenseLevel+0x10c>
		{
           MCUCR&=~(3<<2);
    1144:	a5 e5       	ldi	r26, 0x55	; 85
    1146:	b0 e0       	ldi	r27, 0x00	; 0
    1148:	e5 e5       	ldi	r30, 0x55	; 85
    114a:	f0 e0       	ldi	r31, 0x00	; 0
    114c:	80 81       	ld	r24, Z
    114e:	83 7f       	andi	r24, 0xF3	; 243
    1150:	8c 93       	st	X, r24
       	switch(Copy_u8SenseLevel)
    1152:	8a 81       	ldd	r24, Y+2	; 0x02
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	3e 83       	std	Y+6, r19	; 0x06
    115a:	2d 83       	std	Y+5, r18	; 0x05
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	82 32       	cpi	r24, 0x22	; 34
    1162:	91 05       	cpc	r25, r1
    1164:	89 f0       	breq	.+34     	; 0x1188 <EXTI_voidSetSenseLevel+0xdc>
    1166:	2d 81       	ldd	r18, Y+5	; 0x05
    1168:	3e 81       	ldd	r19, Y+6	; 0x06
    116a:	23 32       	cpi	r18, 0x23	; 35
    116c:	31 05       	cpc	r19, r1
    116e:	34 f4       	brge	.+12     	; 0x117c <EXTI_voidSetSenseLevel+0xd0>
    1170:	8d 81       	ldd	r24, Y+5	; 0x05
    1172:	9e 81       	ldd	r25, Y+6	; 0x06
    1174:	8a 30       	cpi	r24, 0x0A	; 10
    1176:	91 05       	cpc	r25, r1
    1178:	79 f0       	breq	.+30     	; 0x1198 <EXTI_voidSetSenseLevel+0xec>
    117a:	3e c0       	rjmp	.+124    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
    117c:	2d 81       	ldd	r18, Y+5	; 0x05
    117e:	3e 81       	ldd	r19, Y+6	; 0x06
    1180:	29 34       	cpi	r18, 0x49	; 73
    1182:	31 05       	cpc	r19, r1
    1184:	89 f0       	breq	.+34     	; 0x11a8 <EXTI_voidSetSenseLevel+0xfc>
    1186:	38 c0       	rjmp	.+112    	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
       			{
       			case LOW_LEVEL:

       				break;
       			case ANY_CHANGE:
       				MCUCR |= (1<<2);
    1188:	a5 e5       	ldi	r26, 0x55	; 85
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e5 e5       	ldi	r30, 0x55	; 85
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	84 60       	ori	r24, 0x04	; 4
    1194:	8c 93       	st	X, r24
    1196:	30 c0       	rjmp	.+96     	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case FALLING:
       				MCUCR |= (2<<2);
    1198:	a5 e5       	ldi	r26, 0x55	; 85
    119a:	b0 e0       	ldi	r27, 0x00	; 0
    119c:	e5 e5       	ldi	r30, 0x55	; 85
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	80 81       	ld	r24, Z
    11a2:	88 60       	ori	r24, 0x08	; 8
    11a4:	8c 93       	st	X, r24
    11a6:	28 c0       	rjmp	.+80     	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case RISING:
       				MCUCR |= (3<<2);
    11a8:	a5 e5       	ldi	r26, 0x55	; 85
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	e5 e5       	ldi	r30, 0x55	; 85
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8c 60       	ori	r24, 0x0C	; 12
    11b4:	8c 93       	st	X, r24
    11b6:	20 c0       	rjmp	.+64     	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
       				break;

       			}

		}
		else if(Copy_u8IntPinNum == INT2)
    11b8:	89 81       	ldd	r24, Y+1	; 0x01
    11ba:	82 30       	cpi	r24, 0x02	; 2
    11bc:	e9 f4       	brne	.+58     	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
		{
        MCUCSR&=~(1<<6);
    11be:	a4 e5       	ldi	r26, 0x54	; 84
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e4 e5       	ldi	r30, 0x54	; 84
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	8f 7b       	andi	r24, 0xBF	; 191
    11ca:	8c 93       	st	X, r24
        switch(Copy_u8SenseLevel){
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3c 83       	std	Y+4, r19	; 0x04
    11d4:	2b 83       	std	Y+3, r18	; 0x03
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	8a 30       	cpi	r24, 0x0A	; 10
    11dc:	91 05       	cpc	r25, r1
    11de:	61 f0       	breq	.+24     	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
    11e0:	2b 81       	ldd	r18, Y+3	; 0x03
    11e2:	3c 81       	ldd	r19, Y+4	; 0x04
    11e4:	29 34       	cpi	r18, 0x49	; 73
    11e6:	31 05       	cpc	r19, r1
    11e8:	39 f4       	brne	.+14     	; 0x11f8 <EXTI_voidSetSenseLevel+0x14c>
        case FALLING:
        	break;
        case RISING:
        	MCUCSR|=(1<<6);
    11ea:	a4 e5       	ldi	r26, 0x54	; 84
    11ec:	b0 e0       	ldi	r27, 0x00	; 0
    11ee:	e4 e5       	ldi	r30, 0x54	; 84
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	80 81       	ld	r24, Z
    11f4:	80 64       	ori	r24, 0x40	; 64
    11f6:	8c 93       	st	X, r24

		}}


		return;
	}
    11f8:	28 96       	adiw	r28, 0x08	; 8
    11fa:	0f b6       	in	r0, 0x3f	; 63
    11fc:	f8 94       	cli
    11fe:	de bf       	out	0x3e, r29	; 62
    1200:	0f be       	out	0x3f, r0	; 63
    1202:	cd bf       	out	0x3d, r28	; 61
    1204:	cf 91       	pop	r28
    1206:	df 91       	pop	r29
    1208:	08 95       	ret

0000120a <EXTI_voidEnableInterrupt>:


void EXTI_voidEnableInterrupt(u8 Copy_u8IntPinNum){
    120a:	df 93       	push	r29
    120c:	cf 93       	push	r28
    120e:	00 d0       	rcall	.+0      	; 0x1210 <EXTI_voidEnableInterrupt+0x6>
    1210:	0f 92       	push	r0
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPinNum){
    1218:	89 81       	ldd	r24, Y+1	; 0x01
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	3b 83       	std	Y+3, r19	; 0x03
    1220:	2a 83       	std	Y+2, r18	; 0x02
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	9b 81       	ldd	r25, Y+3	; 0x03
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	91 05       	cpc	r25, r1
    122a:	89 f0       	breq	.+34     	; 0x124e <EXTI_voidEnableInterrupt+0x44>
    122c:	2a 81       	ldd	r18, Y+2	; 0x02
    122e:	3b 81       	ldd	r19, Y+3	; 0x03
    1230:	22 30       	cpi	r18, 0x02	; 2
    1232:	31 05       	cpc	r19, r1
    1234:	a1 f0       	breq	.+40     	; 0x125e <EXTI_voidEnableInterrupt+0x54>
    1236:	8a 81       	ldd	r24, Y+2	; 0x02
    1238:	9b 81       	ldd	r25, Y+3	; 0x03
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	b9 f4       	brne	.+46     	; 0x126c <EXTI_voidEnableInterrupt+0x62>
	case INT0:
		GICR|=(1<<6);
    123e:	ab e5       	ldi	r26, 0x5B	; 91
    1240:	b0 e0       	ldi	r27, 0x00	; 0
    1242:	eb e5       	ldi	r30, 0x5B	; 91
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	80 81       	ld	r24, Z
    1248:	80 64       	ori	r24, 0x40	; 64
    124a:	8c 93       	st	X, r24
    124c:	0f c0       	rjmp	.+30     	; 0x126c <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT1:
		GICR|=(1<<7	);
    124e:	ab e5       	ldi	r26, 0x5B	; 91
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	eb e5       	ldi	r30, 0x5B	; 91
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24
    125c:	07 c0       	rjmp	.+14     	; 0x126c <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT2:
		GICR|=(1<<5);
    125e:	ab e5       	ldi	r26, 0x5B	; 91
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	eb e5       	ldi	r30, 0x5B	; 91
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	80 62       	ori	r24, 0x20	; 32
    126a:	8c 93       	st	X, r24
		break;

}
return;
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	0f 90       	pop	r0
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <EXTI_voidsDisableInterrupt>:
void EXTI_voidsDisableInterrupt(u8 Copy_u8IntPinNum){
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <EXTI_voidsDisableInterrupt+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8IntPinNum){
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3b 83       	std	Y+3, r19	; 0x03
    128e:	2a 83       	std	Y+2, r18	; 0x02
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	89 f0       	breq	.+34     	; 0x12bc <EXTI_voidsDisableInterrupt+0x44>
    129a:	2a 81       	ldd	r18, Y+2	; 0x02
    129c:	3b 81       	ldd	r19, Y+3	; 0x03
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	a1 f0       	breq	.+40     	; 0x12cc <EXTI_voidsDisableInterrupt+0x54>
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	b9 f4       	brne	.+46     	; 0x12da <EXTI_voidsDisableInterrupt+0x62>
		case INT0:
			GICR&=~(1<<6);
    12ac:	ab e5       	ldi	r26, 0x5B	; 91
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	eb e5       	ldi	r30, 0x5B	; 91
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 7b       	andi	r24, 0xBF	; 191
    12b8:	8c 93       	st	X, r24
    12ba:	0f c0       	rjmp	.+30     	; 0x12da <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT1:
			GICR&=~(1<<7	);
    12bc:	ab e5       	ldi	r26, 0x5B	; 91
    12be:	b0 e0       	ldi	r27, 0x00	; 0
    12c0:	eb e5       	ldi	r30, 0x5B	; 91
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	80 81       	ld	r24, Z
    12c6:	8f 77       	andi	r24, 0x7F	; 127
    12c8:	8c 93       	st	X, r24
    12ca:	07 c0       	rjmp	.+14     	; 0x12da <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT2:
			GICR&=~(1<<5);
    12cc:	ab e5       	ldi	r26, 0x5B	; 91
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	eb e5       	ldi	r30, 0x5B	; 91
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 7d       	andi	r24, 0xDF	; 223
    12d8:	8c 93       	st	X, r24
			break;

}
		return;
}
    12da:	0f 90       	pop	r0
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	cf 91       	pop	r28
    12e2:	df 91       	pop	r29
    12e4:	08 95       	ret

000012e6 <EXTI_voidCallBack>:

void EXTI_voidCallBack(void(*Copy_pFunAppFun)(void) , u8 Copy_u8IntPinNum){
    12e6:	df 93       	push	r29
    12e8:	cf 93       	push	r28
    12ea:	00 d0       	rcall	.+0      	; 0x12ec <EXTI_voidCallBack+0x6>
    12ec:	00 d0       	rcall	.+0      	; 0x12ee <EXTI_voidCallBack+0x8>
    12ee:	0f 92       	push	r0
    12f0:	cd b7       	in	r28, 0x3d	; 61
    12f2:	de b7       	in	r29, 0x3e	; 62
    12f4:	9a 83       	std	Y+2, r25	; 0x02
    12f6:	89 83       	std	Y+1, r24	; 0x01
    12f8:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_pFunAppFun != NULL)
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	00 97       	sbiw	r24, 0x00	; 0
    1300:	39 f1       	breq	.+78     	; 0x1350 <EXTI_voidCallBack+0x6a>
		{
			switch(Copy_u8IntPinNum){
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	28 2f       	mov	r18, r24
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	3d 83       	std	Y+5, r19	; 0x05
    130a:	2c 83       	std	Y+4, r18	; 0x04
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	9d 81       	ldd	r25, Y+5	; 0x05
    1310:	81 30       	cpi	r24, 0x01	; 1
    1312:	91 05       	cpc	r25, r1
    1314:	81 f0       	breq	.+32     	; 0x1336 <EXTI_voidCallBack+0x50>
    1316:	2c 81       	ldd	r18, Y+4	; 0x04
    1318:	3d 81       	ldd	r19, Y+5	; 0x05
    131a:	22 30       	cpi	r18, 0x02	; 2
    131c:	31 05       	cpc	r19, r1
    131e:	91 f0       	breq	.+36     	; 0x1344 <EXTI_voidCallBack+0x5e>
    1320:	8c 81       	ldd	r24, Y+4	; 0x04
    1322:	9d 81       	ldd	r25, Y+5	; 0x05
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	a1 f4       	brne	.+40     	; 0x1350 <EXTI_voidCallBack+0x6a>
			case INT0:
				EXTI_pFunISR0Fun=Copy_pFunAppFun;
    1328:	89 81       	ldd	r24, Y+1	; 0x01
    132a:	9a 81       	ldd	r25, Y+2	; 0x02
    132c:	90 93 7b 01 	sts	0x017B, r25
    1330:	80 93 7a 01 	sts	0x017A, r24
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <EXTI_voidCallBack+0x6a>
				break;
			case INT1:
				EXTI_pFunISR1Fun=Copy_pFunAppFun;
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	9a 81       	ldd	r25, Y+2	; 0x02
    133a:	90 93 7d 01 	sts	0x017D, r25
    133e:	80 93 7c 01 	sts	0x017C, r24
    1342:	06 c0       	rjmp	.+12     	; 0x1350 <EXTI_voidCallBack+0x6a>
				break;
			case INT2:
				EXTI_pFunISR2Fun=Copy_pFunAppFun;
    1344:	89 81       	ldd	r24, Y+1	; 0x01
    1346:	9a 81       	ldd	r25, Y+2	; 0x02
    1348:	90 93 7f 01 	sts	0x017F, r25
    134c:	80 93 7e 01 	sts	0x017E, r24
				break;

			}
		}
		return;
	}
    1350:	0f 90       	pop	r0
    1352:	0f 90       	pop	r0
    1354:	0f 90       	pop	r0
    1356:	0f 90       	pop	r0
    1358:	0f 90       	pop	r0
    135a:	cf 91       	pop	r28
    135c:	df 91       	pop	r29
    135e:	08 95       	ret

00001360 <DIO_voidSetPinDirection>:
#include"DIO_priv.h"
#include"DIO_conf.h"



void DIO_voidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){
    1360:	df 93       	push	r29
    1362:	cf 93       	push	r28
    1364:	00 d0       	rcall	.+0      	; 0x1366 <DIO_voidSetPinDirection+0x6>
    1366:	00 d0       	rcall	.+0      	; 0x1368 <DIO_voidSetPinDirection+0x8>
    1368:	0f 92       	push	r0
    136a:	cd b7       	in	r28, 0x3d	; 61
    136c:	de b7       	in	r29, 0x3e	; 62
    136e:	89 83       	std	Y+1, r24	; 0x01
    1370:	6a 83       	std	Y+2, r22	; 0x02
    1372:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&Copy_u8Direction<=DIO_u8OUTPUT){
    1374:	89 81       	ldd	r24, Y+1	; 0x01
    1376:	84 30       	cpi	r24, 0x04	; 4
    1378:	08 f0       	brcs	.+2      	; 0x137c <DIO_voidSetPinDirection+0x1c>
    137a:	ce c0       	rjmp	.+412    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	88 30       	cpi	r24, 0x08	; 8
    1380:	08 f0       	brcs	.+2      	; 0x1384 <DIO_voidSetPinDirection+0x24>
    1382:	ca c0       	rjmp	.+404    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	08 f0       	brcs	.+2      	; 0x138c <DIO_voidSetPinDirection+0x2c>
    138a:	c6 c0       	rjmp	.+396    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
		switch(Copy_u8GroupID){
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	3d 83       	std	Y+5, r19	; 0x05
    1394:	2c 83       	std	Y+4, r18	; 0x04
    1396:	6c 81       	ldd	r22, Y+4	; 0x04
    1398:	7d 81       	ldd	r23, Y+5	; 0x05
    139a:	61 30       	cpi	r22, 0x01	; 1
    139c:	71 05       	cpc	r23, r1
    139e:	09 f4       	brne	.+2      	; 0x13a2 <DIO_voidSetPinDirection+0x42>
    13a0:	41 c0       	rjmp	.+130    	; 0x1424 <DIO_voidSetPinDirection+0xc4>
    13a2:	8c 81       	ldd	r24, Y+4	; 0x04
    13a4:	9d 81       	ldd	r25, Y+5	; 0x05
    13a6:	82 30       	cpi	r24, 0x02	; 2
    13a8:	91 05       	cpc	r25, r1
    13aa:	34 f4       	brge	.+12     	; 0x13b8 <DIO_voidSetPinDirection+0x58>
    13ac:	2c 81       	ldd	r18, Y+4	; 0x04
    13ae:	3d 81       	ldd	r19, Y+5	; 0x05
    13b0:	21 15       	cp	r18, r1
    13b2:	31 05       	cpc	r19, r1
    13b4:	71 f0       	breq	.+28     	; 0x13d2 <DIO_voidSetPinDirection+0x72>
    13b6:	b0 c0       	rjmp	.+352    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
    13b8:	6c 81       	ldd	r22, Y+4	; 0x04
    13ba:	7d 81       	ldd	r23, Y+5	; 0x05
    13bc:	62 30       	cpi	r22, 0x02	; 2
    13be:	71 05       	cpc	r23, r1
    13c0:	09 f4       	brne	.+2      	; 0x13c4 <DIO_voidSetPinDirection+0x64>
    13c2:	59 c0       	rjmp	.+178    	; 0x1476 <DIO_voidSetPinDirection+0x116>
    13c4:	8c 81       	ldd	r24, Y+4	; 0x04
    13c6:	9d 81       	ldd	r25, Y+5	; 0x05
    13c8:	83 30       	cpi	r24, 0x03	; 3
    13ca:	91 05       	cpc	r25, r1
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <DIO_voidSetPinDirection+0x70>
    13ce:	7c c0       	rjmp	.+248    	; 0x14c8 <DIO_voidSetPinDirection+0x168>
    13d0:	a3 c0       	rjmp	.+326    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    13d2:	aa e3       	ldi	r26, 0x3A	; 58
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	ea e3       	ldi	r30, 0x3A	; 58
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	8a 81       	ldd	r24, Y+2	; 0x02
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_voidSetPinDirection+0x8e>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	2a 95       	dec	r18
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_voidSetPinDirection+0x8a>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);
    13f8:	aa e3       	ldi	r26, 0x3A	; 58
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	ea e3       	ldi	r30, 0x3A	; 58
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	b9 01       	movw	r22, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_voidSetPinDirection+0xb8>
    1414:	66 0f       	add	r22, r22
    1416:	77 1f       	adc	r23, r23
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_voidSetPinDirection+0xb4>
    141c:	cb 01       	movw	r24, r22
    141e:	84 2b       	or	r24, r20
    1420:	8c 93       	st	X, r24
    1422:	7a c0       	rjmp	.+244    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1424:	a7 e3       	ldi	r26, 0x37	; 55
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e7 e3       	ldi	r30, 0x37	; 55
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	8a 81       	ldd	r24, Y+2	; 0x02
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_voidSetPinDirection+0xe0>
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	2a 95       	dec	r18
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_voidSetPinDirection+0xdc>
    1444:	80 95       	com	r24
    1446:	84 23       	and	r24, r20
    1448:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);
    144a:	a7 e3       	ldi	r26, 0x37	; 55
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	e7 e3       	ldi	r30, 0x37	; 55
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	48 2f       	mov	r20, r24
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	28 2f       	mov	r18, r24
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	8a 81       	ldd	r24, Y+2	; 0x02
    145e:	88 2f       	mov	r24, r24
    1460:	90 e0       	ldi	r25, 0x00	; 0
    1462:	b9 01       	movw	r22, r18
    1464:	02 c0       	rjmp	.+4      	; 0x146a <DIO_voidSetPinDirection+0x10a>
    1466:	66 0f       	add	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	8a 95       	dec	r24
    146c:	e2 f7       	brpl	.-8      	; 0x1466 <DIO_voidSetPinDirection+0x106>
    146e:	cb 01       	movw	r24, r22
    1470:	84 2b       	or	r24, r20
    1472:	8c 93       	st	X, r24
    1474:	51 c0       	rjmp	.+162    	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1476:	a4 e3       	ldi	r26, 0x34	; 52
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e4 e3       	ldi	r30, 0x34	; 52
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 c0       	rjmp	.+4      	; 0x1492 <DIO_voidSetPinDirection+0x132>
    148e:	88 0f       	add	r24, r24
    1490:	99 1f       	adc	r25, r25
    1492:	2a 95       	dec	r18
    1494:	e2 f7       	brpl	.-8      	; 0x148e <DIO_voidSetPinDirection+0x12e>
    1496:	80 95       	com	r24
    1498:	84 23       	and	r24, r20
    149a:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);
    149c:	a4 e3       	ldi	r26, 0x34	; 52
    149e:	b0 e0       	ldi	r27, 0x00	; 0
    14a0:	e4 e3       	ldi	r30, 0x34	; 52
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	48 2f       	mov	r20, r24
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	28 2f       	mov	r18, r24
    14ac:	30 e0       	ldi	r19, 0x00	; 0
    14ae:	8a 81       	ldd	r24, Y+2	; 0x02
    14b0:	88 2f       	mov	r24, r24
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	b9 01       	movw	r22, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <DIO_voidSetPinDirection+0x15c>
    14b8:	66 0f       	add	r22, r22
    14ba:	77 1f       	adc	r23, r23
    14bc:	8a 95       	dec	r24
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <DIO_voidSetPinDirection+0x158>
    14c0:	cb 01       	movw	r24, r22
    14c2:	84 2b       	or	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	28 c0       	rjmp	.+80     	; 0x1518 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    14c8:	a1 e3       	ldi	r26, 0x31	; 49
    14ca:	b0 e0       	ldi	r27, 0x00	; 0
    14cc:	e1 e3       	ldi	r30, 0x31	; 49
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 c0       	rjmp	.+4      	; 0x14e4 <DIO_voidSetPinDirection+0x184>
    14e0:	88 0f       	add	r24, r24
    14e2:	99 1f       	adc	r25, r25
    14e4:	2a 95       	dec	r18
    14e6:	e2 f7       	brpl	.-8      	; 0x14e0 <DIO_voidSetPinDirection+0x180>
    14e8:	80 95       	com	r24
    14ea:	84 23       	and	r24, r20
    14ec:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);
    14ee:	a1 e3       	ldi	r26, 0x31	; 49
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e1 e3       	ldi	r30, 0x31	; 49
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	48 2f       	mov	r20, r24
    14fa:	8b 81       	ldd	r24, Y+3	; 0x03
    14fc:	28 2f       	mov	r18, r24
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	88 2f       	mov	r24, r24
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	b9 01       	movw	r22, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_voidSetPinDirection+0x1ae>
    150a:	66 0f       	add	r22, r22
    150c:	77 1f       	adc	r23, r23
    150e:	8a 95       	dec	r24
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_voidSetPinDirection+0x1aa>
    1512:	cb 01       	movw	r24, r22
    1514:	84 2b       	or	r24, r20
    1516:	8c 93       	st	X, r24
		}

	}

	return ;
}
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
    151e:	0f 90       	pop	r0
    1520:	0f 90       	pop	r0
    1522:	cf 91       	pop	r28
    1524:	df 91       	pop	r29
    1526:	08 95       	ret

00001528 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){
    1528:	df 93       	push	r29
    152a:	cf 93       	push	r28
    152c:	00 d0       	rcall	.+0      	; 0x152e <DIO_voidSetPinValue+0x6>
    152e:	00 d0       	rcall	.+0      	; 0x1530 <DIO_voidSetPinValue+0x8>
    1530:	0f 92       	push	r0
    1532:	cd b7       	in	r28, 0x3d	; 61
    1534:	de b7       	in	r29, 0x3e	; 62
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	6a 83       	std	Y+2, r22	; 0x02
    153a:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&DIO_u8HIGH){
    153c:	89 81       	ldd	r24, Y+1	; 0x01
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	08 f0       	brcs	.+2      	; 0x1544 <DIO_voidSetPinValue+0x1c>
    1542:	ca c0       	rjmp	.+404    	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
    1544:	8a 81       	ldd	r24, Y+2	; 0x02
    1546:	88 30       	cpi	r24, 0x08	; 8
    1548:	08 f0       	brcs	.+2      	; 0x154c <DIO_voidSetPinValue+0x24>
    154a:	c6 c0       	rjmp	.+396    	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
		switch(Copy_u8GroupID){
    154c:	89 81       	ldd	r24, Y+1	; 0x01
    154e:	28 2f       	mov	r18, r24
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	3d 83       	std	Y+5, r19	; 0x05
    1554:	2c 83       	std	Y+4, r18	; 0x04
    1556:	6c 81       	ldd	r22, Y+4	; 0x04
    1558:	7d 81       	ldd	r23, Y+5	; 0x05
    155a:	61 30       	cpi	r22, 0x01	; 1
    155c:	71 05       	cpc	r23, r1
    155e:	09 f4       	brne	.+2      	; 0x1562 <DIO_voidSetPinValue+0x3a>
    1560:	41 c0       	rjmp	.+130    	; 0x15e4 <DIO_voidSetPinValue+0xbc>
    1562:	8c 81       	ldd	r24, Y+4	; 0x04
    1564:	9d 81       	ldd	r25, Y+5	; 0x05
    1566:	82 30       	cpi	r24, 0x02	; 2
    1568:	91 05       	cpc	r25, r1
    156a:	34 f4       	brge	.+12     	; 0x1578 <DIO_voidSetPinValue+0x50>
    156c:	2c 81       	ldd	r18, Y+4	; 0x04
    156e:	3d 81       	ldd	r19, Y+5	; 0x05
    1570:	21 15       	cp	r18, r1
    1572:	31 05       	cpc	r19, r1
    1574:	71 f0       	breq	.+28     	; 0x1592 <DIO_voidSetPinValue+0x6a>
    1576:	b0 c0       	rjmp	.+352    	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
    1578:	6c 81       	ldd	r22, Y+4	; 0x04
    157a:	7d 81       	ldd	r23, Y+5	; 0x05
    157c:	62 30       	cpi	r22, 0x02	; 2
    157e:	71 05       	cpc	r23, r1
    1580:	09 f4       	brne	.+2      	; 0x1584 <DIO_voidSetPinValue+0x5c>
    1582:	59 c0       	rjmp	.+178    	; 0x1636 <DIO_voidSetPinValue+0x10e>
    1584:	8c 81       	ldd	r24, Y+4	; 0x04
    1586:	9d 81       	ldd	r25, Y+5	; 0x05
    1588:	83 30       	cpi	r24, 0x03	; 3
    158a:	91 05       	cpc	r25, r1
    158c:	09 f4       	brne	.+2      	; 0x1590 <DIO_voidSetPinValue+0x68>
    158e:	7c c0       	rjmp	.+248    	; 0x1688 <DIO_voidSetPinValue+0x160>
    1590:	a3 c0       	rjmp	.+326    	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1592:	ab e3       	ldi	r26, 0x3B	; 59
    1594:	b0 e0       	ldi	r27, 0x00	; 0
    1596:	eb e3       	ldi	r30, 0x3B	; 59
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	48 2f       	mov	r20, r24
    159e:	8a 81       	ldd	r24, Y+2	; 0x02
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	02 c0       	rjmp	.+4      	; 0x15ae <DIO_voidSetPinValue+0x86>
    15aa:	88 0f       	add	r24, r24
    15ac:	99 1f       	adc	r25, r25
    15ae:	2a 95       	dec	r18
    15b0:	e2 f7       	brpl	.-8      	; 0x15aa <DIO_voidSetPinValue+0x82>
    15b2:	80 95       	com	r24
    15b4:	84 23       	and	r24, r20
    15b6:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    15b8:	ab e3       	ldi	r26, 0x3B	; 59
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	eb e3       	ldi	r30, 0x3B	; 59
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	88 2f       	mov	r24, r24
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	b9 01       	movw	r22, r18
    15d2:	02 c0       	rjmp	.+4      	; 0x15d8 <DIO_voidSetPinValue+0xb0>
    15d4:	66 0f       	add	r22, r22
    15d6:	77 1f       	adc	r23, r23
    15d8:	8a 95       	dec	r24
    15da:	e2 f7       	brpl	.-8      	; 0x15d4 <DIO_voidSetPinValue+0xac>
    15dc:	cb 01       	movw	r24, r22
    15de:	84 2b       	or	r24, r20
    15e0:	8c 93       	st	X, r24
    15e2:	7a c0       	rjmp	.+244    	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    15e4:	a8 e3       	ldi	r26, 0x38	; 56
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e8 e3       	ldi	r30, 0x38	; 56
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	48 2f       	mov	r20, r24
    15f0:	8a 81       	ldd	r24, Y+2	; 0x02
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	02 c0       	rjmp	.+4      	; 0x1600 <DIO_voidSetPinValue+0xd8>
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	2a 95       	dec	r18
    1602:	e2 f7       	brpl	.-8      	; 0x15fc <DIO_voidSetPinValue+0xd4>
    1604:	80 95       	com	r24
    1606:	84 23       	and	r24, r20
    1608:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    160a:	a8 e3       	ldi	r26, 0x38	; 56
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e8 e3       	ldi	r30, 0x38	; 56
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	48 2f       	mov	r20, r24
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8a 81       	ldd	r24, Y+2	; 0x02
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	b9 01       	movw	r22, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <DIO_voidSetPinValue+0x102>
    1626:	66 0f       	add	r22, r22
    1628:	77 1f       	adc	r23, r23
    162a:	8a 95       	dec	r24
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <DIO_voidSetPinValue+0xfe>
    162e:	cb 01       	movw	r24, r22
    1630:	84 2b       	or	r24, r20
    1632:	8c 93       	st	X, r24
    1634:	51 c0       	rjmp	.+162    	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
		 break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1636:	a5 e3       	ldi	r26, 0x35	; 53
    1638:	b0 e0       	ldi	r27, 0x00	; 0
    163a:	e5 e3       	ldi	r30, 0x35	; 53
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
    1640:	48 2f       	mov	r20, r24
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <DIO_voidSetPinValue+0x12a>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	2a 95       	dec	r18
    1654:	e2 f7       	brpl	.-8      	; 0x164e <DIO_voidSetPinValue+0x126>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    165c:	a5 e3       	ldi	r26, 0x35	; 53
    165e:	b0 e0       	ldi	r27, 0x00	; 0
    1660:	e5 e3       	ldi	r30, 0x35	; 53
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	48 2f       	mov	r20, r24
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	28 2f       	mov	r18, r24
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	8a 81       	ldd	r24, Y+2	; 0x02
    1670:	88 2f       	mov	r24, r24
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	b9 01       	movw	r22, r18
    1676:	02 c0       	rjmp	.+4      	; 0x167c <DIO_voidSetPinValue+0x154>
    1678:	66 0f       	add	r22, r22
    167a:	77 1f       	adc	r23, r23
    167c:	8a 95       	dec	r24
    167e:	e2 f7       	brpl	.-8      	; 0x1678 <DIO_voidSetPinValue+0x150>
    1680:	cb 01       	movw	r24, r22
    1682:	84 2b       	or	r24, r20
    1684:	8c 93       	st	X, r24
    1686:	28 c0       	rjmp	.+80     	; 0x16d8 <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1688:	a2 e3       	ldi	r26, 0x32	; 50
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e2 e3       	ldi	r30, 0x32	; 50
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	48 2f       	mov	r20, r24
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	28 2f       	mov	r18, r24
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	81 e0       	ldi	r24, 0x01	; 1
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	02 c0       	rjmp	.+4      	; 0x16a4 <DIO_voidSetPinValue+0x17c>
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	2a 95       	dec	r18
    16a6:	e2 f7       	brpl	.-8      	; 0x16a0 <DIO_voidSetPinValue+0x178>
    16a8:	80 95       	com	r24
    16aa:	84 23       	and	r24, r20
    16ac:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    16ae:	a2 e3       	ldi	r26, 0x32	; 50
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e2 e3       	ldi	r30, 0x32	; 50
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	48 2f       	mov	r20, r24
    16ba:	8b 81       	ldd	r24, Y+3	; 0x03
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	88 2f       	mov	r24, r24
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	b9 01       	movw	r22, r18
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <DIO_voidSetPinValue+0x1a6>
    16ca:	66 0f       	add	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	8a 95       	dec	r24
    16d0:	e2 f7       	brpl	.-8      	; 0x16ca <DIO_voidSetPinValue+0x1a2>
    16d2:	cb 01       	movw	r24, r22
    16d4:	84 2b       	or	r24, r20
    16d6:	8c 93       	st	X, r24
			break;
		}
	}

	return ;
}
    16d8:	0f 90       	pop	r0
    16da:	0f 90       	pop	r0
    16dc:	0f 90       	pop	r0
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	cf 91       	pop	r28
    16e4:	df 91       	pop	r29
    16e6:	08 95       	ret

000016e8 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	00 d0       	rcall	.+0      	; 0x16ee <DIO_voidTogglePinValue+0x6>
    16ee:	00 d0       	rcall	.+0      	; 0x16f0 <DIO_voidTogglePinValue+0x8>
    16f0:	cd b7       	in	r28, 0x3d	; 61
    16f2:	de b7       	in	r29, 0x3e	; 62
    16f4:	89 83       	std	Y+1, r24	; 0x01
    16f6:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <DIO_voidTogglePinValue+0x18>
    16fe:	72 c0       	rjmp	.+228    	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
    1700:	8a 81       	ldd	r24, Y+2	; 0x02
    1702:	88 30       	cpi	r24, 0x08	; 8
    1704:	08 f0       	brcs	.+2      	; 0x1708 <DIO_voidTogglePinValue+0x20>
    1706:	6e c0       	rjmp	.+220    	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
		switch(Copy_u8GroupID){
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3c 83       	std	Y+4, r19	; 0x04
    1710:	2b 83       	std	Y+3, r18	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	49 f1       	breq	.+82     	; 0x176e <DIO_voidTogglePinValue+0x86>
    171c:	2b 81       	ldd	r18, Y+3	; 0x03
    171e:	3c 81       	ldd	r19, Y+4	; 0x04
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	2c f4       	brge	.+10     	; 0x1730 <DIO_voidTogglePinValue+0x48>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	00 97       	sbiw	r24, 0x00	; 0
    172c:	61 f0       	breq	.+24     	; 0x1746 <DIO_voidTogglePinValue+0x5e>
    172e:	5a c0       	rjmp	.+180    	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
    1730:	2b 81       	ldd	r18, Y+3	; 0x03
    1732:	3c 81       	ldd	r19, Y+4	; 0x04
    1734:	22 30       	cpi	r18, 0x02	; 2
    1736:	31 05       	cpc	r19, r1
    1738:	71 f1       	breq	.+92     	; 0x1796 <DIO_voidTogglePinValue+0xae>
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	83 30       	cpi	r24, 0x03	; 3
    1740:	91 05       	cpc	r25, r1
    1742:	e9 f1       	breq	.+122    	; 0x17be <DIO_voidTogglePinValue+0xd6>
    1744:	4f c0       	rjmp	.+158    	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1746:	ab e3       	ldi	r26, 0x3B	; 59
    1748:	b0 e0       	ldi	r27, 0x00	; 0
    174a:	eb e3       	ldi	r30, 0x3B	; 59
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	48 2f       	mov	r20, r24
    1752:	8a 81       	ldd	r24, Y+2	; 0x02
    1754:	28 2f       	mov	r18, r24
    1756:	30 e0       	ldi	r19, 0x00	; 0
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	02 2e       	mov	r0, r18
    175e:	02 c0       	rjmp	.+4      	; 0x1764 <DIO_voidTogglePinValue+0x7c>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	0a 94       	dec	r0
    1766:	e2 f7       	brpl	.-8      	; 0x1760 <DIO_voidTogglePinValue+0x78>
    1768:	84 27       	eor	r24, r20
    176a:	8c 93       	st	X, r24
    176c:	3b c0       	rjmp	.+118    	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_B:
		   PORTB ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    176e:	a8 e3       	ldi	r26, 0x38	; 56
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e8 e3       	ldi	r30, 0x38	; 56
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	48 2f       	mov	r20, r24
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	28 2f       	mov	r18, r24
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	02 2e       	mov	r0, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <DIO_voidTogglePinValue+0xa4>
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	0a 94       	dec	r0
    178e:	e2 f7       	brpl	.-8      	; 0x1788 <DIO_voidTogglePinValue+0xa0>
    1790:	84 27       	eor	r24, r20
    1792:	8c 93       	st	X, r24
    1794:	27 c0       	rjmp	.+78     	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
		   break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1796:	a5 e3       	ldi	r26, 0x35	; 53
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e5 e3       	ldi	r30, 0x35	; 53
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	48 2f       	mov	r20, r24
    17a2:	8a 81       	ldd	r24, Y+2	; 0x02
    17a4:	28 2f       	mov	r18, r24
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	02 2e       	mov	r0, r18
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <DIO_voidTogglePinValue+0xcc>
    17b0:	88 0f       	add	r24, r24
    17b2:	99 1f       	adc	r25, r25
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <DIO_voidTogglePinValue+0xc8>
    17b8:	84 27       	eor	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	13 c0       	rjmp	.+38     	; 0x17e4 <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    17be:	a2 e3       	ldi	r26, 0x32	; 50
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e2 e3       	ldi	r30, 0x32	; 50
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	48 2f       	mov	r20, r24
    17ca:	8a 81       	ldd	r24, Y+2	; 0x02
    17cc:	28 2f       	mov	r18, r24
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	02 2e       	mov	r0, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <DIO_voidTogglePinValue+0xf4>
    17d8:	88 0f       	add	r24, r24
    17da:	99 1f       	adc	r25, r25
    17dc:	0a 94       	dec	r0
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <DIO_voidTogglePinValue+0xf0>
    17e0:	84 27       	eor	r24, r20
    17e2:	8c 93       	st	X, r24

		}
	}

	return ;
}
    17e4:	0f 90       	pop	r0
    17e6:	0f 90       	pop	r0
    17e8:	0f 90       	pop	r0
    17ea:	0f 90       	pop	r0
    17ec:	cf 91       	pop	r28
    17ee:	df 91       	pop	r29
    17f0:	08 95       	ret

000017f2 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value){
    17f2:	df 93       	push	r29
    17f4:	cf 93       	push	r28
    17f6:	00 d0       	rcall	.+0      	; 0x17f8 <DIO_voidGetPinValue+0x6>
    17f8:	00 d0       	rcall	.+0      	; 0x17fa <DIO_voidGetPinValue+0x8>
    17fa:	00 d0       	rcall	.+0      	; 0x17fc <DIO_voidGetPinValue+0xa>
    17fc:	cd b7       	in	r28, 0x3d	; 61
    17fe:	de b7       	in	r29, 0x3e	; 62
    1800:	89 83       	std	Y+1, r24	; 0x01
    1802:	6a 83       	std	Y+2, r22	; 0x02
    1804:	5c 83       	std	Y+4, r21	; 0x04
    1806:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1808:	89 81       	ldd	r24, Y+1	; 0x01
    180a:	84 30       	cpi	r24, 0x04	; 4
    180c:	08 f0       	brcs	.+2      	; 0x1810 <DIO_voidGetPinValue+0x1e>
    180e:	74 c0       	rjmp	.+232    	; 0x18f8 <DIO_voidGetPinValue+0x106>
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	88 30       	cpi	r24, 0x08	; 8
    1814:	08 f0       	brcs	.+2      	; 0x1818 <DIO_voidGetPinValue+0x26>
    1816:	70 c0       	rjmp	.+224    	; 0x18f8 <DIO_voidGetPinValue+0x106>
		switch (Copy_u8GroupID){
    1818:	89 81       	ldd	r24, Y+1	; 0x01
    181a:	28 2f       	mov	r18, r24
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	3e 83       	std	Y+6, r19	; 0x06
    1820:	2d 83       	std	Y+5, r18	; 0x05
    1822:	4d 81       	ldd	r20, Y+5	; 0x05
    1824:	5e 81       	ldd	r21, Y+6	; 0x06
    1826:	41 30       	cpi	r20, 0x01	; 1
    1828:	51 05       	cpc	r21, r1
    182a:	59 f1       	breq	.+86     	; 0x1882 <DIO_voidGetPinValue+0x90>
    182c:	8d 81       	ldd	r24, Y+5	; 0x05
    182e:	9e 81       	ldd	r25, Y+6	; 0x06
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	91 05       	cpc	r25, r1
    1834:	34 f4       	brge	.+12     	; 0x1842 <DIO_voidGetPinValue+0x50>
    1836:	2d 81       	ldd	r18, Y+5	; 0x05
    1838:	3e 81       	ldd	r19, Y+6	; 0x06
    183a:	21 15       	cp	r18, r1
    183c:	31 05       	cpc	r19, r1
    183e:	69 f0       	breq	.+26     	; 0x185a <DIO_voidGetPinValue+0x68>
    1840:	5b c0       	rjmp	.+182    	; 0x18f8 <DIO_voidGetPinValue+0x106>
    1842:	4d 81       	ldd	r20, Y+5	; 0x05
    1844:	5e 81       	ldd	r21, Y+6	; 0x06
    1846:	42 30       	cpi	r20, 0x02	; 2
    1848:	51 05       	cpc	r21, r1
    184a:	79 f1       	breq	.+94     	; 0x18aa <DIO_voidGetPinValue+0xb8>
    184c:	8d 81       	ldd	r24, Y+5	; 0x05
    184e:	9e 81       	ldd	r25, Y+6	; 0x06
    1850:	83 30       	cpi	r24, 0x03	; 3
    1852:	91 05       	cpc	r25, r1
    1854:	09 f4       	brne	.+2      	; 0x1858 <DIO_voidGetPinValue+0x66>
    1856:	3d c0       	rjmp	.+122    	; 0x18d2 <DIO_voidGetPinValue+0xe0>
    1858:	4f c0       	rjmp	.+158    	; 0x18f8 <DIO_voidGetPinValue+0x106>
		case DIO_u8GROUP_A:
			*Copy_pu8Value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    185a:	e9 e3       	ldi	r30, 0x39	; 57
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8a 81       	ldd	r24, Y+2	; 0x02
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a9 01       	movw	r20, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_voidGetPinValue+0x80>
    186e:	55 95       	asr	r21
    1870:	47 95       	ror	r20
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_voidGetPinValue+0x7c>
    1876:	ca 01       	movw	r24, r20
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	eb 81       	ldd	r30, Y+3	; 0x03
    187c:	fc 81       	ldd	r31, Y+4	; 0x04
    187e:	80 83       	st	Z, r24
    1880:	3b c0       	rjmp	.+118    	; 0x18f8 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_B:
			*Copy_pu8Value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1882:	e6 e3       	ldi	r30, 0x36	; 54
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	a9 01       	movw	r20, r18
    1894:	02 c0       	rjmp	.+4      	; 0x189a <DIO_voidGetPinValue+0xa8>
    1896:	55 95       	asr	r21
    1898:	47 95       	ror	r20
    189a:	8a 95       	dec	r24
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <DIO_voidGetPinValue+0xa4>
    189e:	ca 01       	movw	r24, r20
    18a0:	81 70       	andi	r24, 0x01	; 1
    18a2:	eb 81       	ldd	r30, Y+3	; 0x03
    18a4:	fc 81       	ldd	r31, Y+4	; 0x04
    18a6:	80 83       	st	Z, r24
    18a8:	27 c0       	rjmp	.+78     	; 0x18f8 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_C:
			*Copy_pu8Value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    18aa:	e3 e3       	ldi	r30, 0x33	; 51
    18ac:	f0 e0       	ldi	r31, 0x00	; 0
    18ae:	80 81       	ld	r24, Z
    18b0:	28 2f       	mov	r18, r24
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	88 2f       	mov	r24, r24
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	a9 01       	movw	r20, r18
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <DIO_voidGetPinValue+0xd0>
    18be:	55 95       	asr	r21
    18c0:	47 95       	ror	r20
    18c2:	8a 95       	dec	r24
    18c4:	e2 f7       	brpl	.-8      	; 0x18be <DIO_voidGetPinValue+0xcc>
    18c6:	ca 01       	movw	r24, r20
    18c8:	81 70       	andi	r24, 0x01	; 1
    18ca:	eb 81       	ldd	r30, Y+3	; 0x03
    18cc:	fc 81       	ldd	r31, Y+4	; 0x04
    18ce:	80 83       	st	Z, r24
    18d0:	13 c0       	rjmp	.+38     	; 0x18f8 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_D:
			*Copy_pu8Value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    18d2:	e0 e3       	ldi	r30, 0x30	; 48
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <DIO_voidGetPinValue+0xf8>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <DIO_voidGetPinValue+0xf4>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	eb 81       	ldd	r30, Y+3	; 0x03
    18f4:	fc 81       	ldd	r31, Y+4	; 0x04
    18f6:	80 83       	st	Z, r24

		}
	}

	return;
}
    18f8:	26 96       	adiw	r28, 0x06	; 6
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	cf 91       	pop	r28
    1906:	df 91       	pop	r29
    1908:	08 95       	ret

0000190a <DIO_u8GetValue>:
u8 DIO_u8GetValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    190a:	df 93       	push	r29
    190c:	cf 93       	push	r28
    190e:	00 d0       	rcall	.+0      	; 0x1910 <DIO_u8GetValue+0x6>
    1910:	00 d0       	rcall	.+0      	; 0x1912 <DIO_u8GetValue+0x8>
    1912:	0f 92       	push	r0
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
    1918:	8a 83       	std	Y+2, r24	; 0x02
    191a:	6b 83       	std	Y+3, r22	; 0x03
	u8 value=0;
    191c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	84 30       	cpi	r24, 0x04	; 4
    1922:	08 f0       	brcs	.+2      	; 0x1926 <DIO_u8GetValue+0x1c>
    1924:	6b c0       	rjmp	.+214    	; 0x19fc <DIO_u8GetValue+0xf2>
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	88 30       	cpi	r24, 0x08	; 8
    192a:	08 f0       	brcs	.+2      	; 0x192e <DIO_u8GetValue+0x24>
    192c:	67 c0       	rjmp	.+206    	; 0x19fc <DIO_u8GetValue+0xf2>
			switch (Copy_u8GroupID){
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	3d 83       	std	Y+5, r19	; 0x05
    1936:	2c 83       	std	Y+4, r18	; 0x04
    1938:	4c 81       	ldd	r20, Y+4	; 0x04
    193a:	5d 81       	ldd	r21, Y+5	; 0x05
    193c:	41 30       	cpi	r20, 0x01	; 1
    193e:	51 05       	cpc	r21, r1
    1940:	41 f1       	breq	.+80     	; 0x1992 <DIO_u8GetValue+0x88>
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	82 30       	cpi	r24, 0x02	; 2
    1948:	91 05       	cpc	r25, r1
    194a:	34 f4       	brge	.+12     	; 0x1958 <DIO_u8GetValue+0x4e>
    194c:	2c 81       	ldd	r18, Y+4	; 0x04
    194e:	3d 81       	ldd	r19, Y+5	; 0x05
    1950:	21 15       	cp	r18, r1
    1952:	31 05       	cpc	r19, r1
    1954:	61 f0       	breq	.+24     	; 0x196e <DIO_u8GetValue+0x64>
    1956:	52 c0       	rjmp	.+164    	; 0x19fc <DIO_u8GetValue+0xf2>
    1958:	4c 81       	ldd	r20, Y+4	; 0x04
    195a:	5d 81       	ldd	r21, Y+5	; 0x05
    195c:	42 30       	cpi	r20, 0x02	; 2
    195e:	51 05       	cpc	r21, r1
    1960:	51 f1       	breq	.+84     	; 0x19b6 <DIO_u8GetValue+0xac>
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	83 30       	cpi	r24, 0x03	; 3
    1968:	91 05       	cpc	r25, r1
    196a:	b9 f1       	breq	.+110    	; 0x19da <DIO_u8GetValue+0xd0>
    196c:	47 c0       	rjmp	.+142    	; 0x19fc <DIO_u8GetValue+0xf2>
			case DIO_u8GROUP_A:
				value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    196e:	e9 e3       	ldi	r30, 0x39	; 57
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <DIO_u8GetValue+0x7c>
    1982:	55 95       	asr	r21
    1984:	47 95       	ror	r20
    1986:	8a 95       	dec	r24
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <DIO_u8GetValue+0x78>
    198a:	ca 01       	movw	r24, r20
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	89 83       	std	Y+1, r24	; 0x01
    1990:	35 c0       	rjmp	.+106    	; 0x19fc <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_B:
				value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    1992:	e6 e3       	ldi	r30, 0x36	; 54
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	28 2f       	mov	r18, r24
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	88 2f       	mov	r24, r24
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a9 01       	movw	r20, r18
    19a4:	02 c0       	rjmp	.+4      	; 0x19aa <DIO_u8GetValue+0xa0>
    19a6:	55 95       	asr	r21
    19a8:	47 95       	ror	r20
    19aa:	8a 95       	dec	r24
    19ac:	e2 f7       	brpl	.-8      	; 0x19a6 <DIO_u8GetValue+0x9c>
    19ae:	ca 01       	movw	r24, r20
    19b0:	81 70       	andi	r24, 0x01	; 1
    19b2:	89 83       	std	Y+1, r24	; 0x01
    19b4:	23 c0       	rjmp	.+70     	; 0x19fc <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_C:
				value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    19b6:	e3 e3       	ldi	r30, 0x33	; 51
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	80 81       	ld	r24, Z
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	8b 81       	ldd	r24, Y+3	; 0x03
    19c2:	88 2f       	mov	r24, r24
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	a9 01       	movw	r20, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <DIO_u8GetValue+0xc4>
    19ca:	55 95       	asr	r21
    19cc:	47 95       	ror	r20
    19ce:	8a 95       	dec	r24
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <DIO_u8GetValue+0xc0>
    19d2:	ca 01       	movw	r24, r20
    19d4:	81 70       	andi	r24, 0x01	; 1
    19d6:	89 83       	std	Y+1, r24	; 0x01
    19d8:	11 c0       	rjmp	.+34     	; 0x19fc <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_D:
				value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    19da:	e0 e3       	ldi	r30, 0x30	; 48
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	80 81       	ld	r24, Z
    19e0:	28 2f       	mov	r18, r24
    19e2:	30 e0       	ldi	r19, 0x00	; 0
    19e4:	8b 81       	ldd	r24, Y+3	; 0x03
    19e6:	88 2f       	mov	r24, r24
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	a9 01       	movw	r20, r18
    19ec:	02 c0       	rjmp	.+4      	; 0x19f2 <DIO_u8GetValue+0xe8>
    19ee:	55 95       	asr	r21
    19f0:	47 95       	ror	r20
    19f2:	8a 95       	dec	r24
    19f4:	e2 f7       	brpl	.-8      	; 0x19ee <DIO_u8GetValue+0xe4>
    19f6:	ca 01       	movw	r24, r20
    19f8:	81 70       	andi	r24, 0x01	; 1
    19fa:	89 83       	std	Y+1, r24	; 0x01
				break;

			}

}
	return value;
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    19fe:	0f 90       	pop	r0
    1a00:	0f 90       	pop	r0
    1a02:	0f 90       	pop	r0
    1a04:	0f 90       	pop	r0
    1a06:	0f 90       	pop	r0
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	08 95       	ret

00001a0e <ULTRASONIC_SENSOR_voidEdgeProcessing>:

u8 Edge_Count = 0;
u16 Time_High = 0;
u16 distance=0;

void ULTRASONIC_SENSOR_voidEdgeProcessing(void){
    1a0e:	df 93       	push	r29
    1a10:	cf 93       	push	r28
    1a12:	cd b7       	in	r28, 0x3d	; 61
    1a14:	de b7       	in	r29, 0x3e	; 62

	Edge_Count++;
    1a16:	80 91 80 01 	lds	r24, 0x0180
    1a1a:	8f 5f       	subi	r24, 0xFF	; 255
    1a1c:	80 93 80 01 	sts	0x0180, r24
		if(Edge_Count == 1)
    1a20:	80 91 80 01 	lds	r24, 0x0180
    1a24:	81 30       	cpi	r24, 0x01	; 1
    1a26:	31 f4       	brne	.+12     	; 0x1a34 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x26>
		{

			Icu_voidClearTimerValue();
    1a28:	0e 94 cd 07 	call	0xf9a	; 0xf9a <Icu_voidClearTimerValue>

			Icu_voidSetEdgeDetectionType(FALLING_EDGE);
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	0e 94 a3 07 	call	0xf46	; 0xf46 <Icu_voidSetEdgeDetectionType>
    1a32:	11 c0       	rjmp	.+34     	; 0x1a56 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x48>
		}

		else if(Edge_Count == 2)
    1a34:	80 91 80 01 	lds	r24, 0x0180
    1a38:	82 30       	cpi	r24, 0x02	; 2
    1a3a:	69 f4       	brne	.+26     	; 0x1a56 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x48>
		{

			Time_High = Icu_u16GetInputCaptureValue();
    1a3c:	0e 94 c2 07 	call	0xf84	; 0xf84 <Icu_u16GetInputCaptureValue>
    1a40:	90 93 82 01 	sts	0x0182, r25
    1a44:	80 93 81 01 	sts	0x0181, r24


			Edge_Count =0;
    1a48:	10 92 80 01 	sts	0x0180, r1
			Icu_voidClearTimerValue();
    1a4c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <Icu_voidClearTimerValue>

			Icu_voidSetEdgeDetectionType(RISING_EDGE);
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	0e 94 a3 07 	call	0xf46	; 0xf46 <Icu_voidSetEdgeDetectionType>
		}

}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <ULTRASONIC_SENSOR_voidInit>:


void ULTRASONIC_SENSOR_voidInit(void){
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <ULTRASONIC_SENSOR_voidInit+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62

		Icu_ConfigType Icu_Config = {F_8,RISING_EDGE};
    1a66:	82 e0       	ldi	r24, 0x02	; 2
    1a68:	89 83       	std	Y+1, r24	; 0x01
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	8a 83       	std	Y+2, r24	; 0x02


	Icu_voidSetCallBack(ULTRASONIC_SENSOR_voidEdgeProcessing);
    1a6e:	87 e0       	ldi	r24, 0x07	; 7
    1a70:	9d e0       	ldi	r25, 0x0D	; 13
    1a72:	0e 94 91 07 	call	0xf22	; 0xf22 <Icu_voidSetCallBack>


		Icu_voidInit(&Icu_Config);
    1a76:	ce 01       	movw	r24, r28
    1a78:	01 96       	adiw	r24, 0x01	; 1
    1a7a:	0e 94 4a 07 	call	0xe94	; 0xe94 <Icu_voidInit>


		DIO_voidSetPinDirection(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8OUTPUT);
    1a7e:	82 e0       	ldi	r24, 0x02	; 2
    1a80:	60 e0       	ldi	r22, 0x00	; 0
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	08 95       	ret

00001a92 <ULTRASONIC_SENSOR_voidTrigger>:
void ULTRASONIC_SENSOR_voidTrigger(void){
    1a92:	df 93       	push	r29
    1a94:	cf 93       	push	r28
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	68 97       	sbiw	r28, 0x18	; 24
    1a9c:	0f b6       	in	r0, 0x3f	; 63
    1a9e:	f8 94       	cli
    1aa0:	de bf       	out	0x3e, r29	; 62
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8HIGH);
    1aa6:	82 e0       	ldi	r24, 0x02	; 2
    1aa8:	60 e0       	ldi	r22, 0x00	; 0
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	a0 e2       	ldi	r26, 0x20	; 32
    1ab6:	b1 e4       	ldi	r27, 0x41	; 65
    1ab8:	8d 8b       	std	Y+21, r24	; 0x15
    1aba:	9e 8b       	std	Y+22, r25	; 0x16
    1abc:	af 8b       	std	Y+23, r26	; 0x17
    1abe:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    1ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ac8:	2b ea       	ldi	r18, 0xAB	; 171
    1aca:	3a ea       	ldi	r19, 0xAA	; 170
    1acc:	4a ea       	ldi	r20, 0xAA	; 170
    1ace:	50 e4       	ldi	r21, 0x40	; 64
    1ad0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ad4:	dc 01       	movw	r26, r24
    1ad6:	cb 01       	movw	r24, r22
    1ad8:	89 8b       	std	Y+17, r24	; 0x11
    1ada:	9a 8b       	std	Y+18, r25	; 0x12
    1adc:	ab 8b       	std	Y+19, r26	; 0x13
    1ade:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1ae0:	69 89       	ldd	r22, Y+17	; 0x11
    1ae2:	7a 89       	ldd	r23, Y+18	; 0x12
    1ae4:	8b 89       	ldd	r24, Y+19	; 0x13
    1ae6:	9c 89       	ldd	r25, Y+20	; 0x14
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e8       	ldi	r20, 0x80	; 128
    1aee:	5f e3       	ldi	r21, 0x3F	; 63
    1af0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1af4:	88 23       	and	r24, r24
    1af6:	1c f4       	brge	.+6      	; 0x1afe <ULTRASONIC_SENSOR_voidTrigger+0x6c>
		__ticks = 1;
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	88 8b       	std	Y+16, r24	; 0x10
    1afc:	91 c0       	rjmp	.+290    	; 0x1c20 <ULTRASONIC_SENSOR_voidTrigger+0x18e>
	else if (__tmp > 255)
    1afe:	69 89       	ldd	r22, Y+17	; 0x11
    1b00:	7a 89       	ldd	r23, Y+18	; 0x12
    1b02:	8b 89       	ldd	r24, Y+19	; 0x13
    1b04:	9c 89       	ldd	r25, Y+20	; 0x14
    1b06:	20 e0       	ldi	r18, 0x00	; 0
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	4f e7       	ldi	r20, 0x7F	; 127
    1b0c:	53 e4       	ldi	r21, 0x43	; 67
    1b0e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b12:	18 16       	cp	r1, r24
    1b14:	0c f0       	brlt	.+2      	; 0x1b18 <ULTRASONIC_SENSOR_voidTrigger+0x86>
    1b16:	7b c0       	rjmp	.+246    	; 0x1c0e <ULTRASONIC_SENSOR_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    1b18:	6d 89       	ldd	r22, Y+21	; 0x15
    1b1a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b1c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b1e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b20:	20 e0       	ldi	r18, 0x00	; 0
    1b22:	30 e0       	ldi	r19, 0x00	; 0
    1b24:	4a e7       	ldi	r20, 0x7A	; 122
    1b26:	54 e4       	ldi	r21, 0x44	; 68
    1b28:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	cb 01       	movw	r24, r22
    1b30:	8c 87       	std	Y+12, r24	; 0x0c
    1b32:	9d 87       	std	Y+13, r25	; 0x0d
    1b34:	ae 87       	std	Y+14, r26	; 0x0e
    1b36:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b38:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b3a:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b3c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b3e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	4a e7       	ldi	r20, 0x7A	; 122
    1b46:	55 e4       	ldi	r21, 0x45	; 69
    1b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b4c:	dc 01       	movw	r26, r24
    1b4e:	cb 01       	movw	r24, r22
    1b50:	88 87       	std	Y+8, r24	; 0x08
    1b52:	99 87       	std	Y+9, r25	; 0x09
    1b54:	aa 87       	std	Y+10, r26	; 0x0a
    1b56:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1b58:	68 85       	ldd	r22, Y+8	; 0x08
    1b5a:	79 85       	ldd	r23, Y+9	; 0x09
    1b5c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b5e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	40 e8       	ldi	r20, 0x80	; 128
    1b66:	5f e3       	ldi	r21, 0x3F	; 63
    1b68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b6c:	88 23       	and	r24, r24
    1b6e:	2c f4       	brge	.+10     	; 0x1b7a <ULTRASONIC_SENSOR_voidTrigger+0xe8>
		__ticks = 1;
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	9f 83       	std	Y+7, r25	; 0x07
    1b76:	8e 83       	std	Y+6, r24	; 0x06
    1b78:	3f c0       	rjmp	.+126    	; 0x1bf8 <ULTRASONIC_SENSOR_voidTrigger+0x166>
	else if (__tmp > 65535)
    1b7a:	68 85       	ldd	r22, Y+8	; 0x08
    1b7c:	79 85       	ldd	r23, Y+9	; 0x09
    1b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b80:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	3f ef       	ldi	r19, 0xFF	; 255
    1b86:	4f e7       	ldi	r20, 0x7F	; 127
    1b88:	57 e4       	ldi	r21, 0x47	; 71
    1b8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b8e:	18 16       	cp	r1, r24
    1b90:	4c f5       	brge	.+82     	; 0x1be4 <ULTRASONIC_SENSOR_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b92:	6c 85       	ldd	r22, Y+12	; 0x0c
    1b94:	7d 85       	ldd	r23, Y+13	; 0x0d
    1b96:	8e 85       	ldd	r24, Y+14	; 0x0e
    1b98:	9f 85       	ldd	r25, Y+15	; 0x0f
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e2       	ldi	r20, 0x20	; 32
    1ba0:	51 e4       	ldi	r21, 0x41	; 65
    1ba2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	bc 01       	movw	r22, r24
    1bac:	cd 01       	movw	r24, r26
    1bae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bb2:	dc 01       	movw	r26, r24
    1bb4:	cb 01       	movw	r24, r22
    1bb6:	9f 83       	std	Y+7, r25	; 0x07
    1bb8:	8e 83       	std	Y+6, r24	; 0x06
    1bba:	0f c0       	rjmp	.+30     	; 0x1bda <ULTRASONIC_SENSOR_voidTrigger+0x148>
    1bbc:	80 e9       	ldi	r24, 0x90	; 144
    1bbe:	91 e0       	ldi	r25, 0x01	; 1
    1bc0:	9d 83       	std	Y+5, r25	; 0x05
    1bc2:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bc4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <ULTRASONIC_SENSOR_voidTrigger+0x136>
    1bcc:	9d 83       	std	Y+5, r25	; 0x05
    1bce:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bd0:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd2:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd4:	01 97       	sbiw	r24, 0x01	; 1
    1bd6:	9f 83       	std	Y+7, r25	; 0x07
    1bd8:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bda:	8e 81       	ldd	r24, Y+6	; 0x06
    1bdc:	9f 81       	ldd	r25, Y+7	; 0x07
    1bde:	00 97       	sbiw	r24, 0x00	; 0
    1be0:	69 f7       	brne	.-38     	; 0x1bbc <ULTRASONIC_SENSOR_voidTrigger+0x12a>
    1be2:	24 c0       	rjmp	.+72     	; 0x1c2c <ULTRASONIC_SENSOR_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1be4:	68 85       	ldd	r22, Y+8	; 0x08
    1be6:	79 85       	ldd	r23, Y+9	; 0x09
    1be8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1bea:	9b 85       	ldd	r25, Y+11	; 0x0b
    1bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bf0:	dc 01       	movw	r26, r24
    1bf2:	cb 01       	movw	r24, r22
    1bf4:	9f 83       	std	Y+7, r25	; 0x07
    1bf6:	8e 83       	std	Y+6, r24	; 0x06
    1bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfc:	9b 83       	std	Y+3, r25	; 0x03
    1bfe:	8a 83       	std	Y+2, r24	; 0x02
    1c00:	8a 81       	ldd	r24, Y+2	; 0x02
    1c02:	9b 81       	ldd	r25, Y+3	; 0x03
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <ULTRASONIC_SENSOR_voidTrigger+0x172>
    1c08:	9b 83       	std	Y+3, r25	; 0x03
    1c0a:	8a 83       	std	Y+2, r24	; 0x02
    1c0c:	0f c0       	rjmp	.+30     	; 0x1c2c <ULTRASONIC_SENSOR_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c0e:	69 89       	ldd	r22, Y+17	; 0x11
    1c10:	7a 89       	ldd	r23, Y+18	; 0x12
    1c12:	8b 89       	ldd	r24, Y+19	; 0x13
    1c14:	9c 89       	ldd	r25, Y+20	; 0x14
    1c16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	88 8b       	std	Y+16, r24	; 0x10
    1c20:	88 89       	ldd	r24, Y+16	; 0x10
    1c22:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c24:	89 81       	ldd	r24, Y+1	; 0x01
    1c26:	8a 95       	dec	r24
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <ULTRASONIC_SENSOR_voidTrigger+0x194>
    1c2a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8LOW);
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	60 e0       	ldi	r22, 0x00	; 0
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
}
    1c36:	68 96       	adiw	r28, 0x18	; 24
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	de bf       	out	0x3e, r29	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	cd bf       	out	0x3d, r28	; 61
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	08 95       	ret

00001c48 <ULTRASONIC_SENSOR_u16ReadDistance>:
u16 ULTRASONIC_SENSOR_u16ReadDistance(void){
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	cd b7       	in	r28, 0x3d	; 61
    1c4e:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_SENSOR_voidTrigger();
    1c50:	0e 94 49 0d 	call	0x1a92	; 0x1a92 <ULTRASONIC_SENSOR_voidTrigger>

		distance= ((u16)(f32)((Time_High)/57.47));
    1c54:	80 91 81 01 	lds	r24, 0x0181
    1c58:	90 91 82 01 	lds	r25, 0x0182
    1c5c:	cc 01       	movw	r24, r24
    1c5e:	a0 e0       	ldi	r26, 0x00	; 0
    1c60:	b0 e0       	ldi	r27, 0x00	; 0
    1c62:	bc 01       	movw	r22, r24
    1c64:	cd 01       	movw	r24, r26
    1c66:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1c6a:	dc 01       	movw	r26, r24
    1c6c:	cb 01       	movw	r24, r22
    1c6e:	bc 01       	movw	r22, r24
    1c70:	cd 01       	movw	r24, r26
    1c72:	28 e4       	ldi	r18, 0x48	; 72
    1c74:	31 ee       	ldi	r19, 0xE1	; 225
    1c76:	45 e6       	ldi	r20, 0x65	; 101
    1c78:	52 e4       	ldi	r21, 0x42	; 66
    1c7a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1c7e:	dc 01       	movw	r26, r24
    1c80:	cb 01       	movw	r24, r22
    1c82:	bc 01       	movw	r22, r24
    1c84:	cd 01       	movw	r24, r26
    1c86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	90 93 84 01 	sts	0x0184, r25
    1c92:	80 93 83 01 	sts	0x0183, r24
        distance/=2;     /* i work as frequency 16 million not 8 million */
    1c96:	80 91 83 01 	lds	r24, 0x0183
    1c9a:	90 91 84 01 	lds	r25, 0x0184
    1c9e:	96 95       	lsr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	90 93 84 01 	sts	0x0184, r25
    1ca6:	80 93 83 01 	sts	0x0183, r24
	return distance;
    1caa:	80 91 83 01 	lds	r24, 0x0183
    1cae:	90 91 84 01 	lds	r25, 0x0184
}
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <LCD_voidWriteNLatch>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"LCD_priv.h"
#include"LCD_conf.h"
#include<util/delay.h>
void LCD_voidWriteNLatch(u8 Copy_u8Byte){
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	e9 97       	sbiw	r28, 0x39	; 57
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8LOW);
    1cce:	81 e0       	ldi	r24, 0x01	; 1
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	40 e0       	ldi	r20, 0x00	; 0
    1cd4:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	63 e0       	ldi	r22, 0x03	; 3
    1cdc:	40 e0       	ldi	r20, 0x00	; 0
    1cde:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D3_PIN,(Copy_u8Byte>>3)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D2_PIN,(Copy_u8Byte>>2)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D1_PIN,(Copy_u8Byte>>1)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D0_PIN,(Copy_u8Byte>>0)&DIO_u8BIT_MASK);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,(Copy_u8Byte>>7)&DIO_u8BIT_MASK);
    1ce2:	89 ad       	ldd	r24, Y+57	; 0x39
    1ce4:	98 2f       	mov	r25, r24
    1ce6:	99 1f       	adc	r25, r25
    1ce8:	99 27       	eor	r25, r25
    1cea:	99 1f       	adc	r25, r25
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	67 e0       	ldi	r22, 0x07	; 7
    1cf0:	49 2f       	mov	r20, r25
    1cf2:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D6_PIN,(Copy_u8Byte>>6)&DIO_u8BIT_MASK);
    1cf6:	89 ad       	ldd	r24, Y+57	; 0x39
    1cf8:	82 95       	swap	r24
    1cfa:	86 95       	lsr	r24
    1cfc:	86 95       	lsr	r24
    1cfe:	83 70       	andi	r24, 0x03	; 3
    1d00:	98 2f       	mov	r25, r24
    1d02:	91 70       	andi	r25, 0x01	; 1
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	66 e0       	ldi	r22, 0x06	; 6
    1d08:	49 2f       	mov	r20, r25
    1d0a:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D5_PIN,(Copy_u8Byte>>5)&DIO_u8BIT_MASK);
    1d0e:	89 ad       	ldd	r24, Y+57	; 0x39
    1d10:	82 95       	swap	r24
    1d12:	86 95       	lsr	r24
    1d14:	87 70       	andi	r24, 0x07	; 7
    1d16:	98 2f       	mov	r25, r24
    1d18:	91 70       	andi	r25, 0x01	; 1
    1d1a:	80 e0       	ldi	r24, 0x00	; 0
    1d1c:	65 e0       	ldi	r22, 0x05	; 5
    1d1e:	49 2f       	mov	r20, r25
    1d20:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D4_PIN,(Copy_u8Byte>>4)&DIO_u8BIT_MASK);
    1d24:	89 ad       	ldd	r24, Y+57	; 0x39
    1d26:	82 95       	swap	r24
    1d28:	8f 70       	andi	r24, 0x0F	; 15
    1d2a:	98 2f       	mov	r25, r24
    1d2c:	91 70       	andi	r25, 0x01	; 1
    1d2e:	80 e0       	ldi	r24, 0x00	; 0
    1d30:	64 e0       	ldi	r22, 0x04	; 4
    1d32:	49 2f       	mov	r20, r25
    1d34:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	63 e0       	ldi	r22, 0x03	; 3
    1d3c:	41 e0       	ldi	r20, 0x01	; 1
    1d3e:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	a0 e8       	ldi	r26, 0x80	; 128
    1d48:	bf e3       	ldi	r27, 0x3F	; 63
    1d4a:	8d ab       	std	Y+53, r24	; 0x35
    1d4c:	9e ab       	std	Y+54, r25	; 0x36
    1d4e:	af ab       	std	Y+55, r26	; 0x37
    1d50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6d a9       	ldd	r22, Y+53	; 0x35
    1d54:	7e a9       	ldd	r23, Y+54	; 0x36
    1d56:	8f a9       	ldd	r24, Y+55	; 0x37
    1d58:	98 ad       	ldd	r25, Y+56	; 0x38
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a e7       	ldi	r20, 0x7A	; 122
    1d60:	55 e4       	ldi	r21, 0x45	; 69
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	89 ab       	std	Y+49, r24	; 0x31
    1d6c:	9a ab       	std	Y+50, r25	; 0x32
    1d6e:	ab ab       	std	Y+51, r26	; 0x33
    1d70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d72:	69 a9       	ldd	r22, Y+49	; 0x31
    1d74:	7a a9       	ldd	r23, Y+50	; 0x32
    1d76:	8b a9       	ldd	r24, Y+51	; 0x33
    1d78:	9c a9       	ldd	r25, Y+52	; 0x34
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD_voidWriteNLatch+0xdc>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	98 ab       	std	Y+48, r25	; 0x30
    1d90:	8f a7       	std	Y+47, r24	; 0x2f
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD_voidWriteNLatch+0x15a>
	else if (__tmp > 65535)
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD_voidWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6d a9       	ldd	r22, Y+53	; 0x35
    1dae:	7e a9       	ldd	r23, Y+54	; 0x36
    1db0:	8f a9       	ldd	r24, Y+55	; 0x37
    1db2:	98 ad       	ldd	r25, Y+56	; 0x38
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	98 ab       	std	Y+48, r25	; 0x30
    1dd2:	8f a7       	std	Y+47, r24	; 0x2f
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD_voidWriteNLatch+0x13c>
    1dd6:	80 e9       	ldi	r24, 0x90	; 144
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	9e a7       	std	Y+46, r25	; 0x2e
    1ddc:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1dde:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD_voidWriteNLatch+0x12a>
    1de6:	9e a7       	std	Y+46, r25	; 0x2e
    1de8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dec:	98 a9       	ldd	r25, Y+48	; 0x30
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1df6:	98 a9       	ldd	r25, Y+48	; 0x30
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD_voidWriteNLatch+0x11e>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD_voidWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	69 a9       	ldd	r22, Y+49	; 0x31
    1e00:	7a a9       	ldd	r23, Y+50	; 0x32
    1e02:	8b a9       	ldd	r24, Y+51	; 0x33
    1e04:	9c a9       	ldd	r25, Y+52	; 0x34
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	98 ab       	std	Y+48, r25	; 0x30
    1e10:	8f a7       	std	Y+47, r24	; 0x2f
    1e12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e14:	98 a9       	ldd	r25, Y+48	; 0x30
    1e16:	9c a7       	std	Y+44, r25	; 0x2c
    1e18:	8b a7       	std	Y+43, r24	; 0x2b
    1e1a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e1c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD_voidWriteNLatch+0x166>
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	63 e0       	ldi	r22, 0x03	; 3
    1e2a:	40 e0       	ldi	r20, 0x00	; 0
    1e2c:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    1e30:	80 e0       	ldi	r24, 0x00	; 0
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	a0 e0       	ldi	r26, 0x00	; 0
    1e36:	b0 e4       	ldi	r27, 0x40	; 64
    1e38:	8f a3       	std	Y+39, r24	; 0x27
    1e3a:	98 a7       	std	Y+40, r25	; 0x28
    1e3c:	a9 a7       	std	Y+41, r26	; 0x29
    1e3e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e40:	6f a1       	ldd	r22, Y+39	; 0x27
    1e42:	78 a5       	ldd	r23, Y+40	; 0x28
    1e44:	89 a5       	ldd	r24, Y+41	; 0x29
    1e46:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e48:	20 e0       	ldi	r18, 0x00	; 0
    1e4a:	30 e0       	ldi	r19, 0x00	; 0
    1e4c:	4a e7       	ldi	r20, 0x7A	; 122
    1e4e:	55 e4       	ldi	r21, 0x45	; 69
    1e50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e54:	dc 01       	movw	r26, r24
    1e56:	cb 01       	movw	r24, r22
    1e58:	8b a3       	std	Y+35, r24	; 0x23
    1e5a:	9c a3       	std	Y+36, r25	; 0x24
    1e5c:	ad a3       	std	Y+37, r26	; 0x25
    1e5e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e60:	6b a1       	ldd	r22, Y+35	; 0x23
    1e62:	7c a1       	ldd	r23, Y+36	; 0x24
    1e64:	8d a1       	ldd	r24, Y+37	; 0x25
    1e66:	9e a1       	ldd	r25, Y+38	; 0x26
    1e68:	20 e0       	ldi	r18, 0x00	; 0
    1e6a:	30 e0       	ldi	r19, 0x00	; 0
    1e6c:	40 e8       	ldi	r20, 0x80	; 128
    1e6e:	5f e3       	ldi	r21, 0x3F	; 63
    1e70:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e74:	88 23       	and	r24, r24
    1e76:	2c f4       	brge	.+10     	; 0x1e82 <LCD_voidWriteNLatch+0x1ca>
		__ticks = 1;
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	9a a3       	std	Y+34, r25	; 0x22
    1e7e:	89 a3       	std	Y+33, r24	; 0x21
    1e80:	3f c0       	rjmp	.+126    	; 0x1f00 <LCD_voidWriteNLatch+0x248>
	else if (__tmp > 65535)
    1e82:	6b a1       	ldd	r22, Y+35	; 0x23
    1e84:	7c a1       	ldd	r23, Y+36	; 0x24
    1e86:	8d a1       	ldd	r24, Y+37	; 0x25
    1e88:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8a:	20 e0       	ldi	r18, 0x00	; 0
    1e8c:	3f ef       	ldi	r19, 0xFF	; 255
    1e8e:	4f e7       	ldi	r20, 0x7F	; 127
    1e90:	57 e4       	ldi	r21, 0x47	; 71
    1e92:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e96:	18 16       	cp	r1, r24
    1e98:	4c f5       	brge	.+82     	; 0x1eec <LCD_voidWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e9a:	6f a1       	ldd	r22, Y+39	; 0x27
    1e9c:	78 a5       	ldd	r23, Y+40	; 0x28
    1e9e:	89 a5       	ldd	r24, Y+41	; 0x29
    1ea0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ea2:	20 e0       	ldi	r18, 0x00	; 0
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	40 e2       	ldi	r20, 0x20	; 32
    1ea8:	51 e4       	ldi	r21, 0x41	; 65
    1eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eae:	dc 01       	movw	r26, r24
    1eb0:	cb 01       	movw	r24, r22
    1eb2:	bc 01       	movw	r22, r24
    1eb4:	cd 01       	movw	r24, r26
    1eb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	9a a3       	std	Y+34, r25	; 0x22
    1ec0:	89 a3       	std	Y+33, r24	; 0x21
    1ec2:	0f c0       	rjmp	.+30     	; 0x1ee2 <LCD_voidWriteNLatch+0x22a>
    1ec4:	80 e9       	ldi	r24, 0x90	; 144
    1ec6:	91 e0       	ldi	r25, 0x01	; 1
    1ec8:	98 a3       	std	Y+32, r25	; 0x20
    1eca:	8f 8f       	std	Y+31, r24	; 0x1f
    1ecc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ece:	98 a1       	ldd	r25, Y+32	; 0x20
    1ed0:	01 97       	sbiw	r24, 0x01	; 1
    1ed2:	f1 f7       	brne	.-4      	; 0x1ed0 <LCD_voidWriteNLatch+0x218>
    1ed4:	98 a3       	std	Y+32, r25	; 0x20
    1ed6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ed8:	89 a1       	ldd	r24, Y+33	; 0x21
    1eda:	9a a1       	ldd	r25, Y+34	; 0x22
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	9a a3       	std	Y+34, r25	; 0x22
    1ee0:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ee2:	89 a1       	ldd	r24, Y+33	; 0x21
    1ee4:	9a a1       	ldd	r25, Y+34	; 0x22
    1ee6:	00 97       	sbiw	r24, 0x00	; 0
    1ee8:	69 f7       	brne	.-38     	; 0x1ec4 <LCD_voidWriteNLatch+0x20c>
    1eea:	14 c0       	rjmp	.+40     	; 0x1f14 <LCD_voidWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1eec:	6b a1       	ldd	r22, Y+35	; 0x23
    1eee:	7c a1       	ldd	r23, Y+36	; 0x24
    1ef0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ef2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9a a3       	std	Y+34, r25	; 0x22
    1efe:	89 a3       	std	Y+33, r24	; 0x21
    1f00:	89 a1       	ldd	r24, Y+33	; 0x21
    1f02:	9a a1       	ldd	r25, Y+34	; 0x22
    1f04:	9e 8f       	std	Y+30, r25	; 0x1e
    1f06:	8d 8f       	std	Y+29, r24	; 0x1d
    1f08:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f0c:	01 97       	sbiw	r24, 0x01	; 1
    1f0e:	f1 f7       	brne	.-4      	; 0x1f0c <LCD_voidWriteNLatch+0x254>
    1f10:	9e 8f       	std	Y+30, r25	; 0x1e
    1f12:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,((Copy_u8Byte>>3)&1));
    1f14:	89 ad       	ldd	r24, Y+57	; 0x39
    1f16:	86 95       	lsr	r24
    1f18:	86 95       	lsr	r24
    1f1a:	86 95       	lsr	r24
    1f1c:	98 2f       	mov	r25, r24
    1f1e:	91 70       	andi	r25, 0x01	; 1
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	67 e0       	ldi	r22, 0x07	; 7
    1f24:	49 2f       	mov	r20, r25
    1f26:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,((Copy_u8Byte>>2)&1));
    1f2a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f2c:	86 95       	lsr	r24
    1f2e:	86 95       	lsr	r24
    1f30:	98 2f       	mov	r25, r24
    1f32:	91 70       	andi	r25, 0x01	; 1
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	66 e0       	ldi	r22, 0x06	; 6
    1f38:	49 2f       	mov	r20, r25
    1f3a:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,((Copy_u8Byte>>1)&1));
    1f3e:	89 ad       	ldd	r24, Y+57	; 0x39
    1f40:	86 95       	lsr	r24
    1f42:	98 2f       	mov	r25, r24
    1f44:	91 70       	andi	r25, 0x01	; 1
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	65 e0       	ldi	r22, 0x05	; 5
    1f4a:	49 2f       	mov	r20, r25
    1f4c:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,((Copy_u8Byte>>0)&1));
    1f50:	89 ad       	ldd	r24, Y+57	; 0x39
    1f52:	98 2f       	mov	r25, r24
    1f54:	91 70       	andi	r25, 0x01	; 1
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	64 e0       	ldi	r22, 0x04	; 4
    1f5a:	49 2f       	mov	r20, r25
    1f5c:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	63 e0       	ldi	r22, 0x03	; 3
    1f64:	41 e0       	ldi	r20, 0x01	; 1
    1f66:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	90 e0       	ldi	r25, 0x00	; 0
    1f6e:	a0 e8       	ldi	r26, 0x80	; 128
    1f70:	bf e3       	ldi	r27, 0x3F	; 63
    1f72:	89 8f       	std	Y+25, r24	; 0x19
    1f74:	9a 8f       	std	Y+26, r25	; 0x1a
    1f76:	ab 8f       	std	Y+27, r26	; 0x1b
    1f78:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f7a:	69 8d       	ldd	r22, Y+25	; 0x19
    1f7c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f7e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f80:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f82:	20 e0       	ldi	r18, 0x00	; 0
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	4a e7       	ldi	r20, 0x7A	; 122
    1f88:	55 e4       	ldi	r21, 0x45	; 69
    1f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8e:	dc 01       	movw	r26, r24
    1f90:	cb 01       	movw	r24, r22
    1f92:	8d 8b       	std	Y+21, r24	; 0x15
    1f94:	9e 8b       	std	Y+22, r25	; 0x16
    1f96:	af 8b       	std	Y+23, r26	; 0x17
    1f98:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1f9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1f9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa0:	98 8d       	ldd	r25, Y+24	; 0x18
    1fa2:	20 e0       	ldi	r18, 0x00	; 0
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	40 e8       	ldi	r20, 0x80	; 128
    1fa8:	5f e3       	ldi	r21, 0x3F	; 63
    1faa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fae:	88 23       	and	r24, r24
    1fb0:	2c f4       	brge	.+10     	; 0x1fbc <LCD_voidWriteNLatch+0x304>
		__ticks = 1;
    1fb2:	81 e0       	ldi	r24, 0x01	; 1
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	9c 8b       	std	Y+20, r25	; 0x14
    1fb8:	8b 8b       	std	Y+19, r24	; 0x13
    1fba:	3f c0       	rjmp	.+126    	; 0x203a <LCD_voidWriteNLatch+0x382>
	else if (__tmp > 65535)
    1fbc:	6d 89       	ldd	r22, Y+21	; 0x15
    1fbe:	7e 89       	ldd	r23, Y+22	; 0x16
    1fc0:	8f 89       	ldd	r24, Y+23	; 0x17
    1fc2:	98 8d       	ldd	r25, Y+24	; 0x18
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	3f ef       	ldi	r19, 0xFF	; 255
    1fc8:	4f e7       	ldi	r20, 0x7F	; 127
    1fca:	57 e4       	ldi	r21, 0x47	; 71
    1fcc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fd0:	18 16       	cp	r1, r24
    1fd2:	4c f5       	brge	.+82     	; 0x2026 <LCD_voidWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e2       	ldi	r20, 0x20	; 32
    1fe2:	51 e4       	ldi	r21, 0x41	; 65
    1fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	bc 01       	movw	r22, r24
    1fee:	cd 01       	movw	r24, r26
    1ff0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ff4:	dc 01       	movw	r26, r24
    1ff6:	cb 01       	movw	r24, r22
    1ff8:	9c 8b       	std	Y+20, r25	; 0x14
    1ffa:	8b 8b       	std	Y+19, r24	; 0x13
    1ffc:	0f c0       	rjmp	.+30     	; 0x201c <LCD_voidWriteNLatch+0x364>
    1ffe:	80 e9       	ldi	r24, 0x90	; 144
    2000:	91 e0       	ldi	r25, 0x01	; 1
    2002:	9a 8b       	std	Y+18, r25	; 0x12
    2004:	89 8b       	std	Y+17, r24	; 0x11
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	9a 89       	ldd	r25, Y+18	; 0x12
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	f1 f7       	brne	.-4      	; 0x200a <LCD_voidWriteNLatch+0x352>
    200e:	9a 8b       	std	Y+18, r25	; 0x12
    2010:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2012:	8b 89       	ldd	r24, Y+19	; 0x13
    2014:	9c 89       	ldd	r25, Y+20	; 0x14
    2016:	01 97       	sbiw	r24, 0x01	; 1
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    201c:	8b 89       	ldd	r24, Y+19	; 0x13
    201e:	9c 89       	ldd	r25, Y+20	; 0x14
    2020:	00 97       	sbiw	r24, 0x00	; 0
    2022:	69 f7       	brne	.-38     	; 0x1ffe <LCD_voidWriteNLatch+0x346>
    2024:	14 c0       	rjmp	.+40     	; 0x204e <LCD_voidWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2026:	6d 89       	ldd	r22, Y+21	; 0x15
    2028:	7e 89       	ldd	r23, Y+22	; 0x16
    202a:	8f 89       	ldd	r24, Y+23	; 0x17
    202c:	98 8d       	ldd	r25, Y+24	; 0x18
    202e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2032:	dc 01       	movw	r26, r24
    2034:	cb 01       	movw	r24, r22
    2036:	9c 8b       	std	Y+20, r25	; 0x14
    2038:	8b 8b       	std	Y+19, r24	; 0x13
    203a:	8b 89       	ldd	r24, Y+19	; 0x13
    203c:	9c 89       	ldd	r25, Y+20	; 0x14
    203e:	98 8b       	std	Y+16, r25	; 0x10
    2040:	8f 87       	std	Y+15, r24	; 0x0f
    2042:	8f 85       	ldd	r24, Y+15	; 0x0f
    2044:	98 89       	ldd	r25, Y+16	; 0x10
    2046:	01 97       	sbiw	r24, 0x01	; 1
    2048:	f1 f7       	brne	.-4      	; 0x2046 <LCD_voidWriteNLatch+0x38e>
    204a:	98 8b       	std	Y+16, r25	; 0x10
    204c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	63 e0       	ldi	r22, 0x03	; 3
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e4       	ldi	r27, 0x40	; 64
    2060:	8b 87       	std	Y+11, r24	; 0x0b
    2062:	9c 87       	std	Y+12, r25	; 0x0c
    2064:	ad 87       	std	Y+13, r26	; 0x0d
    2066:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2068:	6b 85       	ldd	r22, Y+11	; 0x0b
    206a:	7c 85       	ldd	r23, Y+12	; 0x0c
    206c:	8d 85       	ldd	r24, Y+13	; 0x0d
    206e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	4a e7       	ldi	r20, 0x7A	; 122
    2076:	55 e4       	ldi	r21, 0x45	; 69
    2078:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207c:	dc 01       	movw	r26, r24
    207e:	cb 01       	movw	r24, r22
    2080:	8f 83       	std	Y+7, r24	; 0x07
    2082:	98 87       	std	Y+8, r25	; 0x08
    2084:	a9 87       	std	Y+9, r26	; 0x09
    2086:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2088:	6f 81       	ldd	r22, Y+7	; 0x07
    208a:	78 85       	ldd	r23, Y+8	; 0x08
    208c:	89 85       	ldd	r24, Y+9	; 0x09
    208e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e8       	ldi	r20, 0x80	; 128
    2096:	5f e3       	ldi	r21, 0x3F	; 63
    2098:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    209c:	88 23       	and	r24, r24
    209e:	2c f4       	brge	.+10     	; 0x20aa <LCD_voidWriteNLatch+0x3f2>
		__ticks = 1;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9e 83       	std	Y+6, r25	; 0x06
    20a6:	8d 83       	std	Y+5, r24	; 0x05
    20a8:	3f c0       	rjmp	.+126    	; 0x2128 <LCD_voidWriteNLatch+0x470>
	else if (__tmp > 65535)
    20aa:	6f 81       	ldd	r22, Y+7	; 0x07
    20ac:	78 85       	ldd	r23, Y+8	; 0x08
    20ae:	89 85       	ldd	r24, Y+9	; 0x09
    20b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	3f ef       	ldi	r19, 0xFF	; 255
    20b6:	4f e7       	ldi	r20, 0x7F	; 127
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20be:	18 16       	cp	r1, r24
    20c0:	4c f5       	brge	.+82     	; 0x2114 <LCD_voidWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20c2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e2       	ldi	r20, 0x20	; 32
    20d0:	51 e4       	ldi	r21, 0x41	; 65
    20d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
    20da:	bc 01       	movw	r22, r24
    20dc:	cd 01       	movw	r24, r26
    20de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	9e 83       	std	Y+6, r25	; 0x06
    20e8:	8d 83       	std	Y+5, r24	; 0x05
    20ea:	0f c0       	rjmp	.+30     	; 0x210a <LCD_voidWriteNLatch+0x452>
    20ec:	80 e9       	ldi	r24, 0x90	; 144
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	9c 83       	std	Y+4, r25	; 0x04
    20f2:	8b 83       	std	Y+3, r24	; 0x03
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	01 97       	sbiw	r24, 0x01	; 1
    20fa:	f1 f7       	brne	.-4      	; 0x20f8 <LCD_voidWriteNLatch+0x440>
    20fc:	9c 83       	std	Y+4, r25	; 0x04
    20fe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2100:	8d 81       	ldd	r24, Y+5	; 0x05
    2102:	9e 81       	ldd	r25, Y+6	; 0x06
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	9e 83       	std	Y+6, r25	; 0x06
    2108:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    210a:	8d 81       	ldd	r24, Y+5	; 0x05
    210c:	9e 81       	ldd	r25, Y+6	; 0x06
    210e:	00 97       	sbiw	r24, 0x00	; 0
    2110:	69 f7       	brne	.-38     	; 0x20ec <LCD_voidWriteNLatch+0x434>
    2112:	14 c0       	rjmp	.+40     	; 0x213c <LCD_voidWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2114:	6f 81       	ldd	r22, Y+7	; 0x07
    2116:	78 85       	ldd	r23, Y+8	; 0x08
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	9e 83       	std	Y+6, r25	; 0x06
    2126:	8d 83       	std	Y+5, r24	; 0x05
    2128:	8d 81       	ldd	r24, Y+5	; 0x05
    212a:	9e 81       	ldd	r25, Y+6	; 0x06
    212c:	9a 83       	std	Y+2, r25	; 0x02
    212e:	89 83       	std	Y+1, r24	; 0x01
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	9a 81       	ldd	r25, Y+2	; 0x02
    2134:	01 97       	sbiw	r24, 0x01	; 1
    2136:	f1 f7       	brne	.-4      	; 0x2134 <LCD_voidWriteNLatch+0x47c>
    2138:	9a 83       	std	Y+2, r25	; 0x02
    213a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

					return;
}
    213c:	e9 96       	adiw	r28, 0x39	; 57
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
    2148:	cf 91       	pop	r28
    214a:	df 91       	pop	r29
    214c:	08 95       	ret

0000214e <LCD_voidInit>:
void LCD_voidInit(void){
    214e:	df 93       	push	r29
    2150:	cf 93       	push	r28
    2152:	cd b7       	in	r28, 0x3d	; 61
    2154:	de b7       	in	r29, 0x3e	; 62
    2156:	6c 97       	sbiw	r28, 0x1c	; 28
    2158:	0f b6       	in	r0, 0x3f	; 63
    215a:	f8 94       	cli
    215c:	de bf       	out	0x3e, r29	; 62
    215e:	0f be       	out	0x3f, r0	; 63
    2160:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OUTPUT);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	61 e0       	ldi	r22, 0x01	; 1
    2166:	41 e0       	ldi	r20, 0x01	; 1
    2168:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8OUTPUT);
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	62 e0       	ldi	r22, 0x02	; 2
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8OUTPUT);
    2176:	81 e0       	ldi	r24, 0x01	; 1
    2178:	63 e0       	ldi	r22, 0x03	; 3
    217a:	41 e0       	ldi	r20, 0x01	; 1
    217c:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_u8D7_GROUP,LCD_u8D7_PIN,DIO_u8OUTPUT);
    2180:	80 e0       	ldi	r24, 0x00	; 0
    2182:	67 e0       	ldi	r22, 0x07	; 7
    2184:	41 e0       	ldi	r20, 0x01	; 1
    2186:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D6_GROUP,LCD_u8D6_PIN,DIO_u8OUTPUT);
    218a:	80 e0       	ldi	r24, 0x00	; 0
    218c:	66 e0       	ldi	r22, 0x06	; 6
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D5_GROUP,LCD_u8D5_PIN,DIO_u8OUTPUT);
    2194:	80 e0       	ldi	r24, 0x00	; 0
    2196:	65 e0       	ldi	r22, 0x05	; 5
    2198:	41 e0       	ldi	r20, 0x01	; 1
    219a:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D4_GROUP,LCD_u8D4_PIN,DIO_u8OUTPUT);
    219e:	80 e0       	ldi	r24, 0x00	; 0
    21a0:	64 e0       	ldi	r22, 0x04	; 4
    21a2:	41 e0       	ldi	r20, 0x01	; 1
    21a4:	0e 94 b0 09 	call	0x1360	; 0x1360 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D0_GROUP,LCD_u8D0_PIN,DIO_u8OUTPUT);

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OW);
	LCD_voidWriteNLatch(0x38);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,0);
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	67 e0       	ldi	r22, 0x07	; 7
    21ac:	40 e0       	ldi	r20, 0x00	; 0
    21ae:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,0);
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	66 e0       	ldi	r22, 0x06	; 6
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,1);
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	65 e0       	ldi	r22, 0x05	; 5
    21c0:	41 e0       	ldi	r20, 0x01	; 1
    21c2:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,0);
    21c6:	80 e0       	ldi	r24, 0x00	; 0
    21c8:	64 e0       	ldi	r22, 0x04	; 4
    21ca:	40 e0       	ldi	r20, 0x00	; 0
    21cc:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	63 e0       	ldi	r22, 0x03	; 3
    21d4:	41 e0       	ldi	r20, 0x01	; 1
    21d6:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	a0 e8       	ldi	r26, 0x80	; 128
    21e0:	bf e3       	ldi	r27, 0x3F	; 63
    21e2:	89 8f       	std	Y+25, r24	; 0x19
    21e4:	9a 8f       	std	Y+26, r25	; 0x1a
    21e6:	ab 8f       	std	Y+27, r26	; 0x1b
    21e8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ea:	69 8d       	ldd	r22, Y+25	; 0x19
    21ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21f2:	20 e0       	ldi	r18, 0x00	; 0
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	4a e7       	ldi	r20, 0x7A	; 122
    21f8:	55 e4       	ldi	r21, 0x45	; 69
    21fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21fe:	dc 01       	movw	r26, r24
    2200:	cb 01       	movw	r24, r22
    2202:	8d 8b       	std	Y+21, r24	; 0x15
    2204:	9e 8b       	std	Y+22, r25	; 0x16
    2206:	af 8b       	std	Y+23, r26	; 0x17
    2208:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    220a:	6d 89       	ldd	r22, Y+21	; 0x15
    220c:	7e 89       	ldd	r23, Y+22	; 0x16
    220e:	8f 89       	ldd	r24, Y+23	; 0x17
    2210:	98 8d       	ldd	r25, Y+24	; 0x18
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	40 e8       	ldi	r20, 0x80	; 128
    2218:	5f e3       	ldi	r21, 0x3F	; 63
    221a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    221e:	88 23       	and	r24, r24
    2220:	2c f4       	brge	.+10     	; 0x222c <LCD_voidInit+0xde>
		__ticks = 1;
    2222:	81 e0       	ldi	r24, 0x01	; 1
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	9c 8b       	std	Y+20, r25	; 0x14
    2228:	8b 8b       	std	Y+19, r24	; 0x13
    222a:	3f c0       	rjmp	.+126    	; 0x22aa <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    222c:	6d 89       	ldd	r22, Y+21	; 0x15
    222e:	7e 89       	ldd	r23, Y+22	; 0x16
    2230:	8f 89       	ldd	r24, Y+23	; 0x17
    2232:	98 8d       	ldd	r25, Y+24	; 0x18
    2234:	20 e0       	ldi	r18, 0x00	; 0
    2236:	3f ef       	ldi	r19, 0xFF	; 255
    2238:	4f e7       	ldi	r20, 0x7F	; 127
    223a:	57 e4       	ldi	r21, 0x47	; 71
    223c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2240:	18 16       	cp	r1, r24
    2242:	4c f5       	brge	.+82     	; 0x2296 <LCD_voidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2244:	69 8d       	ldd	r22, Y+25	; 0x19
    2246:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2248:	8b 8d       	ldd	r24, Y+27	; 0x1b
    224a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e2       	ldi	r20, 0x20	; 32
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2258:	dc 01       	movw	r26, r24
    225a:	cb 01       	movw	r24, r22
    225c:	bc 01       	movw	r22, r24
    225e:	cd 01       	movw	r24, r26
    2260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2264:	dc 01       	movw	r26, r24
    2266:	cb 01       	movw	r24, r22
    2268:	9c 8b       	std	Y+20, r25	; 0x14
    226a:	8b 8b       	std	Y+19, r24	; 0x13
    226c:	0f c0       	rjmp	.+30     	; 0x228c <LCD_voidInit+0x13e>
    226e:	80 e9       	ldi	r24, 0x90	; 144
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	9a 8b       	std	Y+18, r25	; 0x12
    2274:	89 8b       	std	Y+17, r24	; 0x11
    2276:	89 89       	ldd	r24, Y+17	; 0x11
    2278:	9a 89       	ldd	r25, Y+18	; 0x12
    227a:	01 97       	sbiw	r24, 0x01	; 1
    227c:	f1 f7       	brne	.-4      	; 0x227a <LCD_voidInit+0x12c>
    227e:	9a 8b       	std	Y+18, r25	; 0x12
    2280:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	01 97       	sbiw	r24, 0x01	; 1
    2288:	9c 8b       	std	Y+20, r25	; 0x14
    228a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    228c:	8b 89       	ldd	r24, Y+19	; 0x13
    228e:	9c 89       	ldd	r25, Y+20	; 0x14
    2290:	00 97       	sbiw	r24, 0x00	; 0
    2292:	69 f7       	brne	.-38     	; 0x226e <LCD_voidInit+0x120>
    2294:	14 c0       	rjmp	.+40     	; 0x22be <LCD_voidInit+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2296:	6d 89       	ldd	r22, Y+21	; 0x15
    2298:	7e 89       	ldd	r23, Y+22	; 0x16
    229a:	8f 89       	ldd	r24, Y+23	; 0x17
    229c:	98 8d       	ldd	r25, Y+24	; 0x18
    229e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	9c 8b       	std	Y+20, r25	; 0x14
    22a8:	8b 8b       	std	Y+19, r24	; 0x13
    22aa:	8b 89       	ldd	r24, Y+19	; 0x13
    22ac:	9c 89       	ldd	r25, Y+20	; 0x14
    22ae:	98 8b       	std	Y+16, r25	; 0x10
    22b0:	8f 87       	std	Y+15, r24	; 0x0f
    22b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    22b4:	98 89       	ldd	r25, Y+16	; 0x10
    22b6:	01 97       	sbiw	r24, 0x01	; 1
    22b8:	f1 f7       	brne	.-4      	; 0x22b6 <LCD_voidInit+0x168>
    22ba:	98 8b       	std	Y+16, r25	; 0x10
    22bc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    22be:	81 e0       	ldi	r24, 0x01	; 1
    22c0:	63 e0       	ldi	r22, 0x03	; 3
    22c2:	40 e0       	ldi	r20, 0x00	; 0
    22c4:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	a0 e0       	ldi	r26, 0x00	; 0
    22ce:	b0 e4       	ldi	r27, 0x40	; 64
    22d0:	8b 87       	std	Y+11, r24	; 0x0b
    22d2:	9c 87       	std	Y+12, r25	; 0x0c
    22d4:	ad 87       	std	Y+13, r26	; 0x0d
    22d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22da:	7c 85       	ldd	r23, Y+12	; 0x0c
    22dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22de:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	4a e7       	ldi	r20, 0x7A	; 122
    22e6:	55 e4       	ldi	r21, 0x45	; 69
    22e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ec:	dc 01       	movw	r26, r24
    22ee:	cb 01       	movw	r24, r22
    22f0:	8f 83       	std	Y+7, r24	; 0x07
    22f2:	98 87       	std	Y+8, r25	; 0x08
    22f4:	a9 87       	std	Y+9, r26	; 0x09
    22f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f8:	6f 81       	ldd	r22, Y+7	; 0x07
    22fa:	78 85       	ldd	r23, Y+8	; 0x08
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e8       	ldi	r20, 0x80	; 128
    2306:	5f e3       	ldi	r21, 0x3F	; 63
    2308:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    230c:	88 23       	and	r24, r24
    230e:	2c f4       	brge	.+10     	; 0x231a <LCD_voidInit+0x1cc>
		__ticks = 1;
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	9e 83       	std	Y+6, r25	; 0x06
    2316:	8d 83       	std	Y+5, r24	; 0x05
    2318:	3f c0       	rjmp	.+126    	; 0x2398 <LCD_voidInit+0x24a>
	else if (__tmp > 65535)
    231a:	6f 81       	ldd	r22, Y+7	; 0x07
    231c:	78 85       	ldd	r23, Y+8	; 0x08
    231e:	89 85       	ldd	r24, Y+9	; 0x09
    2320:	9a 85       	ldd	r25, Y+10	; 0x0a
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	3f ef       	ldi	r19, 0xFF	; 255
    2326:	4f e7       	ldi	r20, 0x7F	; 127
    2328:	57 e4       	ldi	r21, 0x47	; 71
    232a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    232e:	18 16       	cp	r1, r24
    2330:	4c f5       	brge	.+82     	; 0x2384 <LCD_voidInit+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2332:	6b 85       	ldd	r22, Y+11	; 0x0b
    2334:	7c 85       	ldd	r23, Y+12	; 0x0c
    2336:	8d 85       	ldd	r24, Y+13	; 0x0d
    2338:	9e 85       	ldd	r25, Y+14	; 0x0e
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	30 e0       	ldi	r19, 0x00	; 0
    233e:	40 e2       	ldi	r20, 0x20	; 32
    2340:	51 e4       	ldi	r21, 0x41	; 65
    2342:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2346:	dc 01       	movw	r26, r24
    2348:	cb 01       	movw	r24, r22
    234a:	bc 01       	movw	r22, r24
    234c:	cd 01       	movw	r24, r26
    234e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2352:	dc 01       	movw	r26, r24
    2354:	cb 01       	movw	r24, r22
    2356:	9e 83       	std	Y+6, r25	; 0x06
    2358:	8d 83       	std	Y+5, r24	; 0x05
    235a:	0f c0       	rjmp	.+30     	; 0x237a <LCD_voidInit+0x22c>
    235c:	80 e9       	ldi	r24, 0x90	; 144
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	9c 83       	std	Y+4, r25	; 0x04
    2362:	8b 83       	std	Y+3, r24	; 0x03
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_voidInit+0x21a>
    236c:	9c 83       	std	Y+4, r25	; 0x04
    236e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	01 97       	sbiw	r24, 0x01	; 1
    2376:	9e 83       	std	Y+6, r25	; 0x06
    2378:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237a:	8d 81       	ldd	r24, Y+5	; 0x05
    237c:	9e 81       	ldd	r25, Y+6	; 0x06
    237e:	00 97       	sbiw	r24, 0x00	; 0
    2380:	69 f7       	brne	.-38     	; 0x235c <LCD_voidInit+0x20e>
    2382:	14 c0       	rjmp	.+40     	; 0x23ac <LCD_voidInit+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2384:	6f 81       	ldd	r22, Y+7	; 0x07
    2386:	78 85       	ldd	r23, Y+8	; 0x08
    2388:	89 85       	ldd	r24, Y+9	; 0x09
    238a:	9a 85       	ldd	r25, Y+10	; 0x0a
    238c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2390:	dc 01       	movw	r26, r24
    2392:	cb 01       	movw	r24, r22
    2394:	9e 83       	std	Y+6, r25	; 0x06
    2396:	8d 83       	std	Y+5, r24	; 0x05
    2398:	8d 81       	ldd	r24, Y+5	; 0x05
    239a:	9e 81       	ldd	r25, Y+6	; 0x06
    239c:	9a 83       	std	Y+2, r25	; 0x02
    239e:	89 83       	std	Y+1, r24	; 0x01
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <LCD_voidInit+0x256>
    23a8:	9a 83       	std	Y+2, r25	; 0x02
    23aa:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	61 e0       	ldi	r22, 0x01	; 1
    23b0:	40 e0       	ldi	r20, 0x00	; 0
    23b2:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>

	      LCD_voidWriteNLatch(0x28);
    23b6:	88 e2       	ldi	r24, 0x28	; 40
    23b8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>

#endif
	      //desplay on off

	     	      DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	61 e0       	ldi	r22, 0x01	; 1
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	     	      LCD_voidWriteNLatch(0X0F);
    23c6:	8f e0       	ldi	r24, 0x0F	; 15
    23c8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
	     	      //desplay clear
	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	61 e0       	ldi	r22, 0x01	; 1
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	     	    	     	      LCD_voidWriteNLatch(0X01);
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
	     	    	     	      //set mode (increasing or decreasing)and the cursor
	     	    	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	61 e0       	ldi	r22, 0x01	; 1
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	     	    	     	    	      LCD_voidWriteNLatch(0X06);
    23e6:	86 e0       	ldi	r24, 0x06	; 6
    23e8:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
	      return;
}
    23ec:	6c 96       	adiw	r28, 0x1c	; 28
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	cf 91       	pop	r28
    23fa:	df 91       	pop	r29
    23fc:	08 95       	ret

000023fe <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Copy_u8Data){
    23fe:	df 93       	push	r29
    2400:	cf 93       	push	r28
    2402:	0f 92       	push	r0
    2404:	cd b7       	in	r28, 0x3d	; 61
    2406:	de b7       	in	r29, 0x3e	; 62
    2408:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	61 e0       	ldi	r22, 0x01	; 1
    240e:	41 e0       	ldi	r20, 0x01	; 1
    2410:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(Copy_u8Data);
    2414:	89 81       	ldd	r24, Y+1	; 0x01
    2416:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
	return;
}
    241a:	0f 90       	pop	r0
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <LCD_voidWriteCommand>:
void LCD_voidWriteCommand(u8 Copy_u8Command){
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	0f 92       	push	r0
    2428:	cd b7       	in	r28, 0x3d	; 61
    242a:	de b7       	in	r29, 0x3e	; 62
    242c:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	61 e0       	ldi	r22, 0x01	; 1
    2432:	40 e0       	ldi	r20, 0x00	; 0
    2434:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
			      LCD_voidWriteNLatch(Copy_u8Command);
    2438:	89 81       	ldd	r24, Y+1	; 0x01
    243a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
			      return;
}
    243e:	0f 90       	pop	r0
    2440:	cf 91       	pop	r28
    2442:	df 91       	pop	r29
    2444:	08 95       	ret

00002446 <LCD_voidWriteString>:

void LCD_voidWriteString(const char*Copy_String){
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	00 d0       	rcall	.+0      	; 0x244c <LCD_voidWriteString+0x6>
    244c:	cd b7       	in	r28, 0x3d	; 61
    244e:	de b7       	in	r29, 0x3e	; 62
    2450:	9a 83       	std	Y+2, r25	; 0x02
    2452:	89 83       	std	Y+1, r24	; 0x01
    2454:	10 c0       	rjmp	.+32     	; 0x2476 <LCD_voidWriteString+0x30>

	while(*Copy_String!=0){
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	61 e0       	ldi	r22, 0x01	; 1
    245a:	41 e0       	ldi	r20, 0x01	; 1
    245c:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
			LCD_voidWriteNLatch(*Copy_String++);
    2460:	e9 81       	ldd	r30, Y+1	; 0x01
    2462:	fa 81       	ldd	r31, Y+2	; 0x02
    2464:	20 81       	ld	r18, Z
    2466:	89 81       	ldd	r24, Y+1	; 0x01
    2468:	9a 81       	ldd	r25, Y+2	; 0x02
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	9a 83       	std	Y+2, r25	; 0x02
    246e:	89 83       	std	Y+1, r24	; 0x01
    2470:	82 2f       	mov	r24, r18
    2472:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
			      return;
}

void LCD_voidWriteString(const char*Copy_String){

	while(*Copy_String!=0){
    2476:	e9 81       	ldd	r30, Y+1	; 0x01
    2478:	fa 81       	ldd	r31, Y+2	; 0x02
    247a:	80 81       	ld	r24, Z
    247c:	88 23       	and	r24, r24
    247e:	59 f7       	brne	.-42     	; 0x2456 <LCD_voidWriteString+0x10>
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
			LCD_voidWriteNLatch(*Copy_String++);
		}
	return;
}
    2480:	0f 90       	pop	r0
    2482:	0f 90       	pop	r0
    2484:	cf 91       	pop	r28
    2486:	df 91       	pop	r29
    2488:	08 95       	ret

0000248a <LCD_voidClearScreen>:
void LCD_voidClearScreen(void){
    248a:	df 93       	push	r29
    248c:	cf 93       	push	r28
    248e:	cd b7       	in	r28, 0x3d	; 61
    2490:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	61 e0       	ldi	r22, 0x01	; 1
    2496:	40 e0       	ldi	r20, 0x00	; 0
    2498:	0e 94 94 0a 	call	0x1528	; 0x1528 <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(0x01);
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidWriteNLatch>
	LCD_voidWriteCommand(0x80);           //GO TO POSITION ZER0
    24a2:	80 e8       	ldi	r24, 0x80	; 128
    24a4:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
	return;
}
    24a8:	cf 91       	pop	r28
    24aa:	df 91       	pop	r29
    24ac:	08 95       	ret

000024ae <LCD_voidShiftDisplayRight>:
void LCD_voidShiftDisplayRight(void){
    24ae:	df 93       	push	r29
    24b0:	cf 93       	push	r28
    24b2:	cd b7       	in	r28, 0x3d	; 61
    24b4:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x18);
    24b6:	88 e1       	ldi	r24, 0x18	; 24
    24b8:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
	return ;
}
    24bc:	cf 91       	pop	r28
    24be:	df 91       	pop	r29
    24c0:	08 95       	ret

000024c2 <LCD_voidDisplayLeft>:
void LCD_voidDisplayLeft(void){
    24c2:	df 93       	push	r29
    24c4:	cf 93       	push	r28
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x1c);
    24ca:	8c e1       	ldi	r24, 0x1C	; 28
    24cc:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
	return ;
}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <LCD_voidSetCgram>:
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	00 d0       	rcall	.+0      	; 0x24dc <LCD_voidSetCgram+0x6>
    24dc:	00 d0       	rcall	.+0      	; 0x24de <LCD_voidSetCgram+0x8>
    24de:	0f 92       	push	r0
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	9b 83       	std	Y+3, r25	; 0x03
    24e6:	8a 83       	std	Y+2, r24	; 0x02
    24e8:	6c 83       	std	Y+4, r22	; 0x04
    24ea:	4d 83       	std	Y+5, r20	; 0x05

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	08 96       	adiw	r24, 0x08	; 8
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	88 0f       	add	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    2504:	19 82       	std	Y+1, r1	; 0x01
    2506:	0e c0       	rjmp	.+28     	; 0x2524 <LCD_voidSetCgram+0x4e>
			LCD_voidWriteData(Copy_u8Array[i]);
    2508:	89 81       	ldd	r24, Y+1	; 0x01
    250a:	28 2f       	mov	r18, r24
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	9b 81       	ldd	r25, Y+3	; 0x03
    2512:	fc 01       	movw	r30, r24
    2514:	e2 0f       	add	r30, r18
    2516:	f3 1f       	adc	r31, r19
    2518:	80 81       	ld	r24, Z
    251a:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_voidWriteData>
}
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    251e:	89 81       	ldd	r24, Y+1	; 0x01
    2520:	8f 5f       	subi	r24, 0xFF	; 255
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	28 2f       	mov	r18, r24
    2528:	30 e0       	ldi	r19, 0x00	; 0
    252a:	8d 81       	ldd	r24, Y+5	; 0x05
    252c:	88 2f       	mov	r24, r24
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	88 0f       	add	r24, r24
    2532:	99 1f       	adc	r25, r25
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	28 17       	cp	r18, r24
    253e:	39 07       	cpc	r19, r25
    2540:	1c f3       	brlt	.-58     	; 0x2508 <LCD_voidSetCgram+0x32>
			LCD_voidWriteData(Copy_u8Array[i]);

		}
		return;
}
    2542:	0f 90       	pop	r0
    2544:	0f 90       	pop	r0
    2546:	0f 90       	pop	r0
    2548:	0f 90       	pop	r0
    254a:	0f 90       	pop	r0
    254c:	cf 91       	pop	r28
    254e:	df 91       	pop	r29
    2550:	08 95       	ret

00002552 <LCD_voidSetDdram>:
void LCD_voidSetDdram(u8 Copy_u8Position){
    2552:	df 93       	push	r29
    2554:	cf 93       	push	r28
    2556:	0f 92       	push	r0
    2558:	cd b7       	in	r28, 0x3d	; 61
    255a:	de b7       	in	r29, 0x3e	; 62
    255c:	89 83       	std	Y+1, r24	; 0x01

		LCD_voidWriteCommand(0X80+(8*Copy_u8Position));
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	88 2f       	mov	r24, r24
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	40 96       	adiw	r24, 0x10	; 16
    2566:	88 0f       	add	r24, r24
    2568:	99 1f       	adc	r25, r25
    256a:	88 0f       	add	r24, r24
    256c:	99 1f       	adc	r25, r25
    256e:	88 0f       	add	r24, r24
    2570:	99 1f       	adc	r25, r25
    2572:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
		return;
}
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <LCD_voidWriteCharacter>:
void LCD_voidWriteCharacter(u8 Copy_u8Char){
    257e:	df 93       	push	r29
    2580:	cf 93       	push	r28
    2582:	0f 92       	push	r0
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(Copy_u8Char);
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <LCD_voidWriteData>
	return;
}
    2590:	0f 90       	pop	r0
    2592:	cf 91       	pop	r28
    2594:	df 91       	pop	r29
    2596:	08 95       	ret

00002598 <LCD_voidWritInteger>:
void LCD_voidWritInteger(u16 Copy_intNumber){
    2598:	df 93       	push	r29
    259a:	cf 93       	push	r28
    259c:	cd b7       	in	r28, 0x3d	; 61
    259e:	de b7       	in	r29, 0x3e	; 62
    25a0:	2f 97       	sbiw	r28, 0x0f	; 15
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	99 87       	std	Y+9, r25	; 0x09
    25ae:	88 87       	std	Y+8, r24	; 0x08
}
for(u8 i=0;i<local_u8Length;i++){
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    25b0:	2d b7       	in	r18, 0x3d	; 61
    25b2:	3e b7       	in	r19, 0x3e	; 62
    25b4:	3f 87       	std	Y+15, r19	; 0x0f
    25b6:	2e 87       	std	Y+14, r18	; 0x0e
void LCD_voidWriteCharacter(u8 Copy_u8Char){

	LCD_voidWriteData(Copy_u8Char);
	return;
}
void LCD_voidWritInteger(u16 Copy_intNumber){
    25b8:	8d b7       	in	r24, 0x3d	; 61
    25ba:	9e b7       	in	r25, 0x3e	; 62
    25bc:	9b 87       	std	Y+11, r25	; 0x0b
    25be:	8a 87       	std	Y+10, r24	; 0x0a

int local_intTempNum=Copy_intNumber;
    25c0:	88 85       	ldd	r24, Y+8	; 0x08
    25c2:	99 85       	ldd	r25, Y+9	; 0x09
    25c4:	9d 83       	std	Y+5, r25	; 0x05
    25c6:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Length=0;
    25c8:	1b 82       	std	Y+3, r1	; 0x03
if(Copy_intNumber==0){
    25ca:	88 85       	ldd	r24, Y+8	; 0x08
    25cc:	99 85       	ldd	r25, Y+9	; 0x09
    25ce:	00 97       	sbiw	r24, 0x00	; 0
    25d0:	89 f4       	brne	.+34     	; 0x25f4 <LCD_voidWritInteger+0x5c>
	LCD_voidWriteCharacter('0');
    25d2:	80 e3       	ldi	r24, 0x30	; 48
    25d4:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_voidWriteCharacter>
    25d8:	69 c0       	rjmp	.+210    	; 0x26ac <LCD_voidWritInteger+0x114>
	return;
}
while(local_intTempNum!=0){
	local_intTempNum/=10;
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	2a e0       	ldi	r18, 0x0A	; 10
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	b9 01       	movw	r22, r18
    25e4:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__divmodhi4>
    25e8:	cb 01       	movw	r24, r22
    25ea:	9d 83       	std	Y+5, r25	; 0x05
    25ec:	8c 83       	std	Y+4, r24	; 0x04
	local_u8Length++;
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	8f 5f       	subi	r24, 0xFF	; 255
    25f2:	8b 83       	std	Y+3, r24	; 0x03
u8 local_u8Length=0;
if(Copy_intNumber==0){
	LCD_voidWriteCharacter('0');
	return;
}
while(local_intTempNum!=0){
    25f4:	8c 81       	ldd	r24, Y+4	; 0x04
    25f6:	9d 81       	ldd	r25, Y+5	; 0x05
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	79 f7       	brne	.-34     	; 0x25da <LCD_voidWritInteger+0x42>
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
    25fc:	8b 81       	ldd	r24, Y+3	; 0x03
    25fe:	88 2f       	mov	r24, r24
    2600:	90 e0       	ldi	r25, 0x00	; 0
    2602:	2d b7       	in	r18, 0x3d	; 61
    2604:	3e b7       	in	r19, 0x3e	; 62
    2606:	28 1b       	sub	r18, r24
    2608:	39 0b       	sbc	r19, r25
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	3e bf       	out	0x3e, r19	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	2d bf       	out	0x3d, r18	; 61
    2614:	8d b7       	in	r24, 0x3d	; 61
    2616:	9e b7       	in	r25, 0x3e	; 62
    2618:	01 96       	adiw	r24, 0x01	; 1
    261a:	9d 87       	std	Y+13, r25	; 0x0d
    261c:	8c 87       	std	Y+12, r24	; 0x0c
    261e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2620:	9d 85       	ldd	r25, Y+13	; 0x0d
    2622:	00 96       	adiw	r24, 0x00	; 0
    2624:	9d 87       	std	Y+13, r25	; 0x0d
    2626:	8c 87       	std	Y+12, r24	; 0x0c
    2628:	2c 85       	ldd	r18, Y+12	; 0x0c
    262a:	3d 85       	ldd	r19, Y+13	; 0x0d
    262c:	3f 83       	std	Y+7, r19	; 0x07
    262e:	2e 83       	std	Y+6, r18	; 0x06
local_intTempNum=Copy_intNumber;
    2630:	88 85       	ldd	r24, Y+8	; 0x08
    2632:	99 85       	ldd	r25, Y+9	; 0x09
    2634:	9d 83       	std	Y+5, r25	; 0x05
    2636:	8c 83       	std	Y+4, r24	; 0x04
for(u8 i=local_u8Length;i>0;i--){
    2638:	8b 81       	ldd	r24, Y+3	; 0x03
    263a:	8a 83       	std	Y+2, r24	; 0x02
    263c:	20 c0       	rjmp	.+64     	; 0x267e <LCD_voidWritInteger+0xe6>
	array[i-1]=local_intTempNum%10+'0';
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	88 2f       	mov	r24, r24
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	fc 01       	movw	r30, r24
    2646:	31 97       	sbiw	r30, 0x01	; 1
    2648:	8c 81       	ldd	r24, Y+4	; 0x04
    264a:	9d 81       	ldd	r25, Y+5	; 0x05
    264c:	2a e0       	ldi	r18, 0x0A	; 10
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	b9 01       	movw	r22, r18
    2652:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__divmodhi4>
    2656:	28 2f       	mov	r18, r24
    2658:	20 5d       	subi	r18, 0xD0	; 208
    265a:	8e 81       	ldd	r24, Y+6	; 0x06
    265c:	9f 81       	ldd	r25, Y+7	; 0x07
    265e:	e8 0f       	add	r30, r24
    2660:	f9 1f       	adc	r31, r25
    2662:	20 83       	st	Z, r18
	local_intTempNum/=10;
    2664:	8c 81       	ldd	r24, Y+4	; 0x04
    2666:	9d 81       	ldd	r25, Y+5	; 0x05
    2668:	2a e0       	ldi	r18, 0x0A	; 10
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	b9 01       	movw	r22, r18
    266e:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__divmodhi4>
    2672:	cb 01       	movw	r24, r22
    2674:	9d 83       	std	Y+5, r25	; 0x05
    2676:	8c 83       	std	Y+4, r24	; 0x04
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	81 50       	subi	r24, 0x01	; 1
    267c:	8a 83       	std	Y+2, r24	; 0x02
    267e:	8a 81       	ldd	r24, Y+2	; 0x02
    2680:	88 23       	and	r24, r24
    2682:	e9 f6       	brne	.-70     	; 0x263e <LCD_voidWritInteger+0xa6>
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    2684:	19 82       	std	Y+1, r1	; 0x01
    2686:	0e c0       	rjmp	.+28     	; 0x26a4 <LCD_voidWritInteger+0x10c>
	LCD_voidWriteCharacter(array[i]);
    2688:	89 81       	ldd	r24, Y+1	; 0x01
    268a:	28 2f       	mov	r18, r24
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	8e 81       	ldd	r24, Y+6	; 0x06
    2690:	9f 81       	ldd	r25, Y+7	; 0x07
    2692:	fc 01       	movw	r30, r24
    2694:	e2 0f       	add	r30, r18
    2696:	f3 1f       	adc	r31, r19
    2698:	80 81       	ld	r24, Z
    269a:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_voidWriteCharacter>
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    269e:	89 81       	ldd	r24, Y+1	; 0x01
    26a0:	8f 5f       	subi	r24, 0xFF	; 255
    26a2:	89 83       	std	Y+1, r24	; 0x01
    26a4:	99 81       	ldd	r25, Y+1	; 0x01
    26a6:	8b 81       	ldd	r24, Y+3	; 0x03
    26a8:	98 17       	cp	r25, r24
    26aa:	70 f3       	brcs	.-36     	; 0x2688 <LCD_voidWritInteger+0xf0>
    26ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    26b0:	0f b6       	in	r0, 0x3f	; 63
    26b2:	f8 94       	cli
    26b4:	9e bf       	out	0x3e, r25	; 62
    26b6:	0f be       	out	0x3f, r0	; 63
    26b8:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    26ba:	2e 85       	ldd	r18, Y+14	; 0x0e
    26bc:	3f 85       	ldd	r19, Y+15	; 0x0f
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	f8 94       	cli
    26c2:	3e bf       	out	0x3e, r19	; 62
    26c4:	0f be       	out	0x3f, r0	; 63
    26c6:	2d bf       	out	0x3d, r18	; 61
    26c8:	2f 96       	adiw	r28, 0x0f	; 15
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	de bf       	out	0x3e, r29	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	cd bf       	out	0x3d, r28	; 61
    26d4:	cf 91       	pop	r28
    26d6:	df 91       	pop	r29
    26d8:	08 95       	ret

000026da <LCD_voidWriteFloat>:
void LCD_voidWriteFloat(f32 Copy_floatNumber){
    26da:	df 93       	push	r29
    26dc:	cf 93       	push	r28
    26de:	cd b7       	in	r28, 0x3d	; 61
    26e0:	de b7       	in	r29, 0x3e	; 62
    26e2:	2c 97       	sbiw	r28, 0x0c	; 12
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	69 87       	std	Y+9, r22	; 0x09
    26f0:	7a 87       	std	Y+10, r23	; 0x0a
    26f2:	8b 87       	std	Y+11, r24	; 0x0b
    26f4:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32int=(u32)(Copy_floatNumber);
    26f6:	69 85       	ldd	r22, Y+9	; 0x09
    26f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    26fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	8d 83       	std	Y+5, r24	; 0x05
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	af 83       	std	Y+7, r26	; 0x07
    270c:	b8 87       	std	Y+8, r27	; 0x08
	LCD_voidWritInteger(Local_u32int);
    270e:	8d 81       	ldd	r24, Y+5	; 0x05
    2710:	9e 81       	ldd	r25, Y+6	; 0x06
    2712:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_voidWritInteger>
	LCD_voidWriteCharacter('.');
    2716:	8e e2       	ldi	r24, 0x2E	; 46
    2718:	0e 94 bf 12 	call	0x257e	; 0x257e <LCD_voidWriteCharacter>
	u32 Local_u32float=(u32)(1000.0*(Copy_floatNumber-(u32)(Local_u32int)));
    271c:	6d 81       	ldd	r22, Y+5	; 0x05
    271e:	7e 81       	ldd	r23, Y+6	; 0x06
    2720:	8f 81       	ldd	r24, Y+7	; 0x07
    2722:	98 85       	ldd	r25, Y+8	; 0x08
    2724:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2728:	9b 01       	movw	r18, r22
    272a:	ac 01       	movw	r20, r24
    272c:	69 85       	ldd	r22, Y+9	; 0x09
    272e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2730:	8b 85       	ldd	r24, Y+11	; 0x0b
    2732:	9c 85       	ldd	r25, Y+12	; 0x0c
    2734:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	bc 01       	movw	r22, r24
    273e:	cd 01       	movw	r24, r26
    2740:	20 e0       	ldi	r18, 0x00	; 0
    2742:	30 e0       	ldi	r19, 0x00	; 0
    2744:	4a e7       	ldi	r20, 0x7A	; 122
    2746:	54 e4       	ldi	r21, 0x44	; 68
    2748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    274c:	dc 01       	movw	r26, r24
    274e:	cb 01       	movw	r24, r22
    2750:	bc 01       	movw	r22, r24
    2752:	cd 01       	movw	r24, r26
    2754:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2758:	dc 01       	movw	r26, r24
    275a:	cb 01       	movw	r24, r22
    275c:	89 83       	std	Y+1, r24	; 0x01
    275e:	9a 83       	std	Y+2, r25	; 0x02
    2760:	ab 83       	std	Y+3, r26	; 0x03
    2762:	bc 83       	std	Y+4, r27	; 0x04
    LCD_voidWritInteger(Local_u32float);
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_voidWritInteger>

	return;
}
    276c:	2c 96       	adiw	r28, 0x0c	; 12
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	cf 91       	pop	r28
    277a:	df 91       	pop	r29
    277c:	08 95       	ret

0000277e <LCD_voidGoToPosition>:
void LCD_voidGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    277e:	df 93       	push	r29
    2780:	cf 93       	push	r28
    2782:	00 d0       	rcall	.+0      	; 0x2784 <LCD_voidGoToPosition+0x6>
    2784:	cd b7       	in	r28, 0x3d	; 61
    2786:	de b7       	in	r29, 0x3e	; 62
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row<=1&&Copy_u8Col<=16){
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	82 30       	cpi	r24, 0x02	; 2
    2790:	90 f4       	brcc	.+36     	; 0x27b6 <LCD_voidGoToPosition+0x38>
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	81 31       	cpi	r24, 0x11	; 17
    2796:	78 f4       	brcc	.+30     	; 0x27b6 <LCD_voidGoToPosition+0x38>
		if(Copy_u8Row==0){
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	88 23       	and	r24, r24
    279c:	29 f4       	brne	.+10     	; 0x27a8 <LCD_voidGoToPosition+0x2a>
			LCD_voidWriteCommand((0x80+Copy_u8Col));
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	80 58       	subi	r24, 0x80	; 128
    27a2:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
    27a6:	07 c0       	rjmp	.+14     	; 0x27b6 <LCD_voidGoToPosition+0x38>
		}
		else if(Copy_u8Row==1){
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	81 30       	cpi	r24, 0x01	; 1
    27ac:	21 f4       	brne	.+8      	; 0x27b6 <LCD_voidGoToPosition+0x38>
			LCD_voidWriteCommand((0xC0+Copy_u8Col));
    27ae:	8a 81       	ldd	r24, Y+2	; 0x02
    27b0:	80 54       	subi	r24, 0x40	; 64
    27b2:	0e 94 11 12 	call	0x2422	; 0x2422 <LCD_voidWriteCommand>
		}
	}

		return;

}
    27b6:	0f 90       	pop	r0
    27b8:	0f 90       	pop	r0
    27ba:	cf 91       	pop	r28
    27bc:	df 91       	pop	r29
    27be:	08 95       	ret

000027c0 <main>:
#include "../MCAL/GIE/GIE_int.h"
#include "../MCAL/EXTI/EXTI_int.h"
#include "../HAL/ULTRASONIC_SENSOR/ULTRASONIC_SENSOR_int.h"

#include<util/delay.h>
int main(){
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	60 97       	sbiw	r28, 0x10	; 16
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
	GIE_voidEnable();
    27d4:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <GIE_voidEnable>
	ULTRASONIC_SENSOR_voidInit();
    27d8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <ULTRASONIC_SENSOR_voidInit>
	LCD_voidInit();
    27dc:	0e 94 a7 10 	call	0x214e	; 0x214e <LCD_voidInit>
	LCD_voidWriteString("Distance=    cm");
    27e0:	80 e6       	ldi	r24, 0x60	; 96
    27e2:	90 e0       	ldi	r25, 0x00	; 0
    27e4:	0e 94 23 12 	call	0x2446	; 0x2446 <LCD_voidWriteString>

	while(1){
	u16 dis=ULTRASONIC_SENSOR_u16ReadDistance();
    27e8:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <ULTRASONIC_SENSOR_u16ReadDistance>
    27ec:	98 8b       	std	Y+16, r25	; 0x10
    27ee:	8f 87       	std	Y+15, r24	; 0x0f


		LCD_voidGoToPosition(0,10);
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	6a e0       	ldi	r22, 0x0A	; 10
    27f4:	0e 94 bf 13 	call	0x277e	; 0x277e <LCD_voidGoToPosition>
		LCD_voidWritInteger(dis);
    27f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27fa:	98 89       	ldd	r25, Y+16	; 0x10
    27fc:	0e 94 cc 12 	call	0x2598	; 0x2598 <LCD_voidWritInteger>
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	aa e7       	ldi	r26, 0x7A	; 122
    2806:	b4 e4       	ldi	r27, 0x44	; 68
    2808:	8b 87       	std	Y+11, r24	; 0x0b
    280a:	9c 87       	std	Y+12, r25	; 0x0c
    280c:	ad 87       	std	Y+13, r26	; 0x0d
    280e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2810:	6b 85       	ldd	r22, Y+11	; 0x0b
    2812:	7c 85       	ldd	r23, Y+12	; 0x0c
    2814:	8d 85       	ldd	r24, Y+13	; 0x0d
    2816:	9e 85       	ldd	r25, Y+14	; 0x0e
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	4a e7       	ldi	r20, 0x7A	; 122
    281e:	55 e4       	ldi	r21, 0x45	; 69
    2820:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	8f 83       	std	Y+7, r24	; 0x07
    282a:	98 87       	std	Y+8, r25	; 0x08
    282c:	a9 87       	std	Y+9, r26	; 0x09
    282e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2830:	6f 81       	ldd	r22, Y+7	; 0x07
    2832:	78 85       	ldd	r23, Y+8	; 0x08
    2834:	89 85       	ldd	r24, Y+9	; 0x09
    2836:	9a 85       	ldd	r25, Y+10	; 0x0a
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	40 e8       	ldi	r20, 0x80	; 128
    283e:	5f e3       	ldi	r21, 0x3F	; 63
    2840:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2844:	88 23       	and	r24, r24
    2846:	2c f4       	brge	.+10     	; 0x2852 <main+0x92>
		__ticks = 1;
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	9e 83       	std	Y+6, r25	; 0x06
    284e:	8d 83       	std	Y+5, r24	; 0x05
    2850:	3f c0       	rjmp	.+126    	; 0x28d0 <main+0x110>
	else if (__tmp > 65535)
    2852:	6f 81       	ldd	r22, Y+7	; 0x07
    2854:	78 85       	ldd	r23, Y+8	; 0x08
    2856:	89 85       	ldd	r24, Y+9	; 0x09
    2858:	9a 85       	ldd	r25, Y+10	; 0x0a
    285a:	20 e0       	ldi	r18, 0x00	; 0
    285c:	3f ef       	ldi	r19, 0xFF	; 255
    285e:	4f e7       	ldi	r20, 0x7F	; 127
    2860:	57 e4       	ldi	r21, 0x47	; 71
    2862:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2866:	18 16       	cp	r1, r24
    2868:	4c f5       	brge	.+82     	; 0x28bc <main+0xfc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286a:	6b 85       	ldd	r22, Y+11	; 0x0b
    286c:	7c 85       	ldd	r23, Y+12	; 0x0c
    286e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2870:	9e 85       	ldd	r25, Y+14	; 0x0e
    2872:	20 e0       	ldi	r18, 0x00	; 0
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	40 e2       	ldi	r20, 0x20	; 32
    2878:	51 e4       	ldi	r21, 0x41	; 65
    287a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    287e:	dc 01       	movw	r26, r24
    2880:	cb 01       	movw	r24, r22
    2882:	bc 01       	movw	r22, r24
    2884:	cd 01       	movw	r24, r26
    2886:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    288a:	dc 01       	movw	r26, r24
    288c:	cb 01       	movw	r24, r22
    288e:	9e 83       	std	Y+6, r25	; 0x06
    2890:	8d 83       	std	Y+5, r24	; 0x05
    2892:	0f c0       	rjmp	.+30     	; 0x28b2 <main+0xf2>
    2894:	80 e9       	ldi	r24, 0x90	; 144
    2896:	91 e0       	ldi	r25, 0x01	; 1
    2898:	9c 83       	std	Y+4, r25	; 0x04
    289a:	8b 83       	std	Y+3, r24	; 0x03
    289c:	8b 81       	ldd	r24, Y+3	; 0x03
    289e:	9c 81       	ldd	r25, Y+4	; 0x04
    28a0:	01 97       	sbiw	r24, 0x01	; 1
    28a2:	f1 f7       	brne	.-4      	; 0x28a0 <main+0xe0>
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28a8:	8d 81       	ldd	r24, Y+5	; 0x05
    28aa:	9e 81       	ldd	r25, Y+6	; 0x06
    28ac:	01 97       	sbiw	r24, 0x01	; 1
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	00 97       	sbiw	r24, 0x00	; 0
    28b8:	69 f7       	brne	.-38     	; 0x2894 <main+0xd4>
    28ba:	96 cf       	rjmp	.-212    	; 0x27e8 <main+0x28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28bc:	6f 81       	ldd	r22, Y+7	; 0x07
    28be:	78 85       	ldd	r23, Y+8	; 0x08
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28c8:	dc 01       	movw	r26, r24
    28ca:	cb 01       	movw	r24, r22
    28cc:	9e 83       	std	Y+6, r25	; 0x06
    28ce:	8d 83       	std	Y+5, r24	; 0x05
    28d0:	8d 81       	ldd	r24, Y+5	; 0x05
    28d2:	9e 81       	ldd	r25, Y+6	; 0x06
    28d4:	9a 83       	std	Y+2, r25	; 0x02
    28d6:	89 83       	std	Y+1, r24	; 0x01
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	9a 81       	ldd	r25, Y+2	; 0x02
    28dc:	01 97       	sbiw	r24, 0x01	; 1
    28de:	f1 f7       	brne	.-4      	; 0x28dc <main+0x11c>
    28e0:	9a 83       	std	Y+2, r25	; 0x02
    28e2:	89 83       	std	Y+1, r24	; 0x01
    28e4:	81 cf       	rjmp	.-254    	; 0x27e8 <main+0x28>

000028e6 <__divmodhi4>:
    28e6:	97 fb       	bst	r25, 7
    28e8:	09 2e       	mov	r0, r25
    28ea:	07 26       	eor	r0, r23
    28ec:	0a d0       	rcall	.+20     	; 0x2902 <__divmodhi4_neg1>
    28ee:	77 fd       	sbrc	r23, 7
    28f0:	04 d0       	rcall	.+8      	; 0x28fa <__divmodhi4_neg2>
    28f2:	0c d0       	rcall	.+24     	; 0x290c <__udivmodhi4>
    28f4:	06 d0       	rcall	.+12     	; 0x2902 <__divmodhi4_neg1>
    28f6:	00 20       	and	r0, r0
    28f8:	1a f4       	brpl	.+6      	; 0x2900 <__divmodhi4_exit>

000028fa <__divmodhi4_neg2>:
    28fa:	70 95       	com	r23
    28fc:	61 95       	neg	r22
    28fe:	7f 4f       	sbci	r23, 0xFF	; 255

00002900 <__divmodhi4_exit>:
    2900:	08 95       	ret

00002902 <__divmodhi4_neg1>:
    2902:	f6 f7       	brtc	.-4      	; 0x2900 <__divmodhi4_exit>
    2904:	90 95       	com	r25
    2906:	81 95       	neg	r24
    2908:	9f 4f       	sbci	r25, 0xFF	; 255
    290a:	08 95       	ret

0000290c <__udivmodhi4>:
    290c:	aa 1b       	sub	r26, r26
    290e:	bb 1b       	sub	r27, r27
    2910:	51 e1       	ldi	r21, 0x11	; 17
    2912:	07 c0       	rjmp	.+14     	; 0x2922 <__udivmodhi4_ep>

00002914 <__udivmodhi4_loop>:
    2914:	aa 1f       	adc	r26, r26
    2916:	bb 1f       	adc	r27, r27
    2918:	a6 17       	cp	r26, r22
    291a:	b7 07       	cpc	r27, r23
    291c:	10 f0       	brcs	.+4      	; 0x2922 <__udivmodhi4_ep>
    291e:	a6 1b       	sub	r26, r22
    2920:	b7 0b       	sbc	r27, r23

00002922 <__udivmodhi4_ep>:
    2922:	88 1f       	adc	r24, r24
    2924:	99 1f       	adc	r25, r25
    2926:	5a 95       	dec	r21
    2928:	a9 f7       	brne	.-22     	; 0x2914 <__udivmodhi4_loop>
    292a:	80 95       	com	r24
    292c:	90 95       	com	r25
    292e:	bc 01       	movw	r22, r24
    2930:	cd 01       	movw	r24, r26
    2932:	08 95       	ret

00002934 <__prologue_saves__>:
    2934:	2f 92       	push	r2
    2936:	3f 92       	push	r3
    2938:	4f 92       	push	r4
    293a:	5f 92       	push	r5
    293c:	6f 92       	push	r6
    293e:	7f 92       	push	r7
    2940:	8f 92       	push	r8
    2942:	9f 92       	push	r9
    2944:	af 92       	push	r10
    2946:	bf 92       	push	r11
    2948:	cf 92       	push	r12
    294a:	df 92       	push	r13
    294c:	ef 92       	push	r14
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	cf 93       	push	r28
    2956:	df 93       	push	r29
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	ca 1b       	sub	r28, r26
    295e:	db 0b       	sbc	r29, r27
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	de bf       	out	0x3e, r29	; 62
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	cd bf       	out	0x3d, r28	; 61
    296a:	09 94       	ijmp

0000296c <__epilogue_restores__>:
    296c:	2a 88       	ldd	r2, Y+18	; 0x12
    296e:	39 88       	ldd	r3, Y+17	; 0x11
    2970:	48 88       	ldd	r4, Y+16	; 0x10
    2972:	5f 84       	ldd	r5, Y+15	; 0x0f
    2974:	6e 84       	ldd	r6, Y+14	; 0x0e
    2976:	7d 84       	ldd	r7, Y+13	; 0x0d
    2978:	8c 84       	ldd	r8, Y+12	; 0x0c
    297a:	9b 84       	ldd	r9, Y+11	; 0x0b
    297c:	aa 84       	ldd	r10, Y+10	; 0x0a
    297e:	b9 84       	ldd	r11, Y+9	; 0x09
    2980:	c8 84       	ldd	r12, Y+8	; 0x08
    2982:	df 80       	ldd	r13, Y+7	; 0x07
    2984:	ee 80       	ldd	r14, Y+6	; 0x06
    2986:	fd 80       	ldd	r15, Y+5	; 0x05
    2988:	0c 81       	ldd	r16, Y+4	; 0x04
    298a:	1b 81       	ldd	r17, Y+3	; 0x03
    298c:	aa 81       	ldd	r26, Y+2	; 0x02
    298e:	b9 81       	ldd	r27, Y+1	; 0x01
    2990:	ce 0f       	add	r28, r30
    2992:	d1 1d       	adc	r29, r1
    2994:	0f b6       	in	r0, 0x3f	; 63
    2996:	f8 94       	cli
    2998:	de bf       	out	0x3e, r29	; 62
    299a:	0f be       	out	0x3f, r0	; 63
    299c:	cd bf       	out	0x3d, r28	; 61
    299e:	ed 01       	movw	r28, r26
    29a0:	08 95       	ret

000029a2 <_exit>:
    29a2:	f8 94       	cli

000029a4 <__stop_program>:
    29a4:	ff cf       	rjmp	.-2      	; 0x29a4 <__stop_program>
